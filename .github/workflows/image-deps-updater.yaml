name: Update image deps

on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      k0s-version:
        description: 'K0s version for discovering image versions'
        required: false
      overwrite:
        description: 'Overwrite the existing image tags'
        required: false
        default: 'true'
  push:
    branches:
    - emosbaugh/sc-108755/use-chainguard-images-for-embedded-cluster
jobs:
  define-matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set matrix
      id: set-matrix
      run: |
        set -euo pipefail

        # We're only using the APKINDEX files to get the versions, so it doesn't matter which arch we use

        curl -LO --fail --show-error https://packages.wolfi.dev/os/x86_64/APKINDEX.tar.gz
        tar -xzvf APKINDEX.tar.gz

        calico_node_version=$(< APKINDEX grep -A1 "^P:calico-node" | tail -n 1 | sed -n -e 's/V://p' | tr -d '\n')

        if [ -n "${{ github.event.inputs.k0s-version }}" ]; then
          make pkg/goods/bins/k0s K0S_VERSION="${{ github.event.inputs.k0s-version }}" K0S_BINARY_SOURCE_OVERRIDE=
        else
          make pkg/goods/bins/k0s
        fi

        coredns_version=$(pkg/goods/bins/k0s airgap list-images --all | grep coredns: | awk -F':' '{ print $2 }')

        {
          printf "matrix={\"include\":[
          printf "{\"component\": \"calico-node\", \"version\": \"$calico_node_version\"},"
          printf "{\"component\": \"coredns\", \"version\": \"$coredns_version\"}"
          printf ]}"
        } >> "$GITHUB_OUTPUT"

  build-images:
    runs-on: ubuntu-20.04
    needs: define-matrix
    strategy:
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Generate apko config
      run: |
        set -euo pipefail
        sed "s/__VERSION__/${{ matrix.version }}/g" deploy/images/${{ matrix.component }}/apko.tmpl.yaml > apko.yaml

    - name: Build and push image
      uses: ./.github/actions/build-dep-image-with-apko
      with:
        apko-config: apko.yaml
        image-name: ttl.sh/ec/${{ matrix.component }}:${{ matrix.version }}
        # registry-username: ${{ secrets.REGISTRY_USERNAME_STAGING }}
        # registry-password: ${{ secrets.REGISTRY_PASSWORD_STAGING }}
        overwrite: true # ${{ github.event.inputs.overwrite }}
