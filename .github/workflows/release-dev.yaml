name: Release
on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            build/.melange-cache
          key: melange-cache

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Melange
        uses: chainguard-dev/actions/setup-melange@main

      - name: Build and push local-artifact-mirror image
        run: |
          SHA=${{ github.event.pull_request.head.sha }}
          export SHORT_SHA=dev-${SHA::7}
          export LOCAL_ARTIFACT_MIRROR_IMAGE=replicated/embedded-cluster-local-artifact-mirror-staging
          export REGISTRY=docker.io
          export USERNAME=${{ secrets.DOCKERHUB_USER }}
          export PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}
          make apko
          make build-and-push-local-artifact-mirror-image VERSION="${SHORT_SHA}"
          make build-and-push-local-artifact-mirror-image VERSION="${SHORT_SHA}-previous-k0s"
          make build-and-push-local-artifact-mirror-image VERSION="${SHORT_SHA}-upgrade"

      - name: Build and push utils image
        run: |
          SHA=${{ github.event.pull_request.head.sha }}
          export SHORT_SHA=dev-${SHA::7}
          export EMBEDDED_OPERATOR_UTILS_IMAGE=replicated/embedded-cluster-utils-staging
          export REGISTRY=docker.io
          export USERNAME=${{ secrets.DOCKERHUB_USER }}
          export PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}
          make apko
          make build-and-push-utils-image VERSION="${SHORT_SHA}"
          make build-and-push-utils-image VERSION="${SHORT_SHA}-previous-k0s"
          make build-and-push-utils-image VERSION="${SHORT_SHA}-upgrade"
  releaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build Linux AMD64 and Output Metadata
        run: |
          export SHORT_SHA=dev-${GITHUB_SHA::7}
          export LOCAL_ARTIFACT_MIRROR_IMAGE=replicated/embedded-cluster-local-artifact-mirror-staging
          export EMBEDDED_OPERATOR_UTILS_IMAGE=replicated/embedded-cluster-utils-staging
          make -B embedded-cluster-linux-amd64 K0S_VERSION=$(make print-PREVIOUS_K0S_VERSION) K0S_BINARY_SOURCE_OVERRIDE=$(make print-PREVIOUS_K0S_BINARY_SOURCE_OVERRIDE) VERSION="${SHORT_SHA}-previous-k0s"
          tar -C output/bin -czvf embedded-cluster-linux-amd64-previous-k0s.tgz embedded-cluster
          ./output/bin/embedded-cluster version metadata > metadata-previous-k0s.json
          make -B embedded-cluster-linux-amd64 VERSION="${SHORT_SHA}-upgrade"
          tar -C output/bin -czvf embedded-cluster-linux-amd64-upgrade.tgz embedded-cluster
          ./output/bin/embedded-cluster version metadata > metadata-upgrade.json
          make -B embedded-cluster-linux-amd64 VERSION="${SHORT_SHA}"
          tar -C output/bin -czvf embedded-cluster-linux-amd64.tgz embedded-cluster
          ./output/bin/embedded-cluster version metadata > metadata.json
      - name: Publish development release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          automatic_release_tag: development
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          title: Development Release Build
          files: |
            *.tgz
            metadata.json
      - name: Install Replicated CLI
        run: |
          curl -s https://api.github.com/repos/replicatedhq/replicated/releases/latest \
          | grep "browser_download_url.*linux_amd64.tar.gz" \
          | cut -d : -f 2,3 \
          | tr -d \" \
          | wget -O replicated.tar.gz -qi -
          tar xf replicated.tar.gz replicated && rm replicated.tar.gz
          mv replicated /usr/local/bin/replicated
      - name: Create CI Releases
        env:
          REPLICATED_APP: "embedded-cluster-smoke-test-staging-app"
          REPLICATED_API_TOKEN: ${{ secrets.STAGING_REPLICATED_API_TOKEN }}
          REPLICATED_API_ORIGIN: "https://api.staging.replicated.com/vendor"
        run: |
          export SHORT_SHA=dev-${GITHUB_SHA::7}
          echo "${SHORT_SHA}"
          sed -i "s/__version_string__/${SHORT_SHA}/g" e2e/kots-release-install/cluster-config.yaml
          sed -i "s/__version_string__/${SHORT_SHA}-upgrade/g" e2e/kots-release-upgrade/cluster-config.yaml

          # re-promote a release containing an old version of embedded-cluster to test upgrades
          replicated release promote 807 2cHXb1RCttzpR0xvnNWyaZCgDBP --version "appver-${SHORT_SHA}-pre-minio-removal"
          
          replicated release create --yaml-dir e2e/kots-release-install --promote CI --version "appver-${SHORT_SHA}"
          replicated release create --yaml-dir e2e/kots-release-install --promote CI --version "appver-${SHORT_SHA}-noop"
          replicated release create --yaml-dir e2e/kots-release-upgrade --promote CI --version "appver-${SHORT_SHA}-upgrade"
      - name: Build CI binary
        run: |
          export SHORT_SHA=dev-${GITHUB_SHA::7}
          export LOCAL_ARTIFACT_MIRROR_IMAGE=replicated/embedded-cluster-local-artifact-mirror-staging
          export EMBEDDED_OPERATOR_UTILS_IMAGE=replicated/embedded-cluster-utils-staging
          echo "# channel release object" > e2e/kots-release-install/release.yaml
          echo 'channelID: "2cHXb1RCttzpR0xvnNWyaZCgDBP"' >> e2e/kots-release-install/release.yaml
          echo 'channelSlug: "ci"' >> e2e/kots-release-install/release.yaml
          echo 'appSlug: "embedded-cluster-smoke-test-staging-app"' >> e2e/kots-release-install/release.yaml
          echo "versionLabel: \"appver-${SHORT_SHA}\"" >> e2e/kots-release-install/release.yaml
          cat e2e/kots-release-install/release.yaml
          cp output/bin/embedded-cluster output/bin/embedded-cluster-original
          make -B embedded-release K0S_VERSION=$(make print-PREVIOUS_K0S_VERSION) VERSION="${SHORT_SHA}-previous-k0s"
          mv output/bin/embedded-cluster output/bin/embedded-cluster-previous-k0s
          make -B embedded-release VERSION="${SHORT_SHA}" # this is done after the metadata.json is generated so as to not include additional charts
      - name: Cache files for integration test
        env:
          S3_BUCKET: "tf-staging-embedded-cluster-bin"
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_EMBEDDED_CLUSTER_UPLOAD_IAM_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_EMBEDDED_CLUSTER_UPLOAD_IAM_SECRET }}
          AWS_REGION: "us-east-1"
        run: |
          export SHORT_SHA=dev-${GITHUB_SHA::7}
          export EC_VERSION="v${SHORT_SHA}"
          ./scripts/cache-files.sh
          ./scripts/create-upgrade-release.sh
          ./scripts/create-previous-k0s-release.sh
      - name: Create Airgap Release
        env:
          REPLICATED_APP: "embedded-cluster-smoke-test-staging-app"
          REPLICATED_API_TOKEN: ${{ secrets.STAGING_REPLICATED_API_TOKEN }}
          REPLICATED_API_ORIGIN: "https://api.staging.replicated.com/vendor"
        run: |
          export SHORT_SHA=dev-${GITHUB_SHA::7}
          echo "${SHORT_SHA}"
          rm e2e/kots-release-install/release.yaml
          replicated release create --yaml-dir e2e/kots-release-install --promote CI-airgap --version "appver-${SHORT_SHA}"

          # airgap tests install the previous k0s version to ensure an upgrade occurs
          sed -i "s/${SHORT_SHA}/${SHORT_SHA}-previous-k0s/g" e2e/kots-release-install/cluster-config.yaml
          
          replicated release create --yaml-dir e2e/kots-release-install --promote CI-airgap --version "appver-${SHORT_SHA}-previous-k0s"
          replicated release create --yaml-dir e2e/kots-release-upgrade --promote CI-airgap --version "appver-${SHORT_SHA}-upgrade"

      - name: upload binary
        uses: actions/upload-artifact@v4
        with:
          name: embedded-release
          path: |
            output/bin/embedded-cluster
            output/bin/embedded-cluster-original
            output/bin/embedded-cluster-previous-k0s
            output/bin/embedded-cluster-release-builder
  e2e:
    runs-on: ${{ matrix.runner || 'ubuntu-latest' }}
    needs:
      - releaser
      - build-images
    strategy:
      fail-fast: false
      matrix:
        test:
          - TestSingleNodeInstallation
          - TestSingleNodeInstallationAlmaLinux8
          - TestSingleNodeInstallationDebian11
          - TestSingleNodeInstallationDebian12
          - TestSingleNodeInstallationCentos9Stream
          - TestVersion
          - TestHostPreflight
          - TestUnsupportedOverrides
          - TestMultiNodeInstallation
          - TestMultiNodeReset
          - TestCommandsRequireSudo
          - TestInstallWithoutEmbed
          - TestInstallFromReplicatedApp
          - TestResetAndReinstall
          - TestResetAndReinstallAirgap
          - TestCollectSupportBundle
          - TestOldVersionUpgrade
          - TestMaterialize
          - TestLocalArtifactMirror
          - TestSingleNodeAirgapUpgrade
          - TestSingleNodeAirgapUpgradeCustomCIDR
          - TestInstallSnapshotFromReplicatedApp
          - TestMultiNodeAirgapUpgrade
          - TestSingleNodeDisasterRecovery
          - TestSingleNodeDisasterRecoveryWithProxy
          - TestSingleNodeResumeDisasterRecovery
          - TestSingleNodeAirgapDisasterRecovery
          - TestMultiNodeHAInstallation
          - TestMultiNodeAirgapHAInstallation
          - TestProxiedEnvironment
          - TestMultiNodeHADisasterRecovery
          - TestMultiNodeAirgapHADisasterRecovery
          - TestCustomCIDR
          - TestProxiedCustomCIDR
          - TestSingleNodeInstallationNoopUpgrade
        include:
          - test: TestMultiNodeAirgapUpgrade
            runner: embedded-cluster
          - test: TestMultiNodeAirgapUpgradeSameK0s
            runner: embedded-cluster
          - test: TestMultiNodeAirgapHAInstallation
            runner: embedded-cluster
          - test: TestMultiNodeAirgapHADisasterRecovery
            runner: embedded-cluster
          - test: TestSingleNodeAirgapDisasterRecovery
            runner: embedded-cluster
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: download binary
        uses: actions/download-artifact@v4
        with:
          name: embedded-release
          path: output/bin
      - uses: ./.github/actions/e2e
        with:
          test-name: '${{ matrix.test }}'
          is-large-runner: ${{ matrix.runner == 'embedded-cluster' }}
          airgap-license-id: ${{ secrets.STAGING_EMBEDDED_CLUSTER_AIRGAP_LICENSE_ID }}
          snapshot-license-id: ${{ secrets.STAGING_EMBEDDED_CLUSTER_SNAPSHOT_LICENSE_ID }}
          snapshot-license: ${{ secrets.STAGING_EMBEDDED_CLUSTER_SNAPSHOT_LICENSE }}
          airgap-snapshot-license-id: ${{ secrets.STAGING_EMBEDDED_CLUSTER_AIRGAP_SNAPSHOT_LICENSE_ID }}
          license-id: ${{ secrets.STAGING_EMBEDDED_CLUSTER_LICENSE_ID }}
          license: ${{ secrets.STAGING_EMBEDDED_CLUSTER_LICENSE }}
          dr-aws-access-key-id: ${{ secrets.TESTIM_AWS_ACCESS_KEY_ID }}
          dr-aws-secret-access-key: ${{ secrets.TESTIM_AWS_SECRET_ACCESS_KEY }}
