name: End to End
description: e2e tests for embedded-cluster
inputs:
  test-name:
    description: 'individual test to run'
    required: true
  is-large-runner:
    description: 'Whether the test is running on a large runner'
    required: true
  airgap-license-id:
    description: 'airgap-enabled license id to use for e2e tests'
    required: true
  snapshot-license-id:
    description: 'snapshot-enabled license id to use for e2e tests'
    required: true
  snapshot-license:
    description: 'snapshot-enabled license (b64) to use for e2e tests'
    required: true
  license-id:
    description: 'license id to use for e2e tests'
    required: true
  airgap-snapshot-license-id:
    description: 'airgap-snapshot-enabled license id to use for e2e tests'
    required: true
  license:
    description: 'license (b64) to use for e2e tests'
    required: true
  dr-aws-access-key-id:
    description: 'Disaster Recovery AWS Access Key ID'
    required: true
  dr-aws-secret-access-key:
    description: 'Disaster Recovery AWS Secret Access Key'
    required: true
  k0s-version:
    description: 'k0s version to expect in e2e tests'
    required: true
  k0s-version-previous:
    description: 'k0s previous version to expect in e2e tests'
    required: true

runs:
  using: composite
  steps:
  - name: Git SHA
    id: git_sha
    uses: ./.github/actions/git-sha
  - name: Remove MS repo
    shell: bash
    run: |
      apt-add-repository --list
      sudo apt-add-repository -y -r deb [arch=amd64,arm64,armhf] https://packages.microsoft.com/ubuntu/22.04/prod jammy main
      apt-add-repository --list
  - name: Move Docker aside
    shell: bash
    run: |
      sudo systemctl stop docker
      sudo iptables -F
      sudo iptables -P FORWARD ACCEPT
  - name: Install and Configure LXD
    shell: bash
    run: |
      sudo lxd init --auto
      sudo snap set lxd daemon.group=adm
      sudo snap restart lxd
      sudo lxd waitready
  - name: Install and configure OVN
    shell: bash
    run: |
      sudo apt-get update -y
      sudo apt-get install ovn-host ovn-central -y
      sudo ovs-vsctl set open_vswitch .                            \
           external_ids:ovn-remote=unix:/var/run/ovn/ovnsb_db.sock \
           external_ids:ovn-encap-type=geneve                      \
           external_ids:ovn-encap-ip=127.0.0.1
  - name: Free up runner disk space
    if: ${{ inputs.is-large-runner == 'false' }}
    shell: bash
    run: |
      df -h
      sudo docker system prune -af
      sudo rm -rf /usr/local/lib/android
      sudo rm -rf /opt/hostedtoolcache/CodeQL
      sudo rm -rf /opt/hostedtoolcache/Python
      sudo rm -rf /usr/share/dotnet
      sudo rm -rf /opt/ghc
      sudo rm -rf /usr/local/share/boost
      df -h
  - name: Set AppArmor mode to complain
    shell: bash
    run: |
      sudo apt-get update -y
      sudo apt install apparmor-utils -y
      sudo aa-complain /etc/apparmor.d/*
  - name: Setup Go
    uses: actions/setup-go@v5
    with:
      go-version-file: go.mod
  - name: E2E
    shell: bash
    run: |
      export SHORT_SHA=dev-${{ steps.git_sha.outputs.git_sha }}
      echo "${SHORT_SHA}"
      export LICENSE_ID=${{ inputs.license-id }}
      export AIRGAP_LICENSE_ID=${{ inputs.airgap-license-id }}
      export SNAPSHOT_LICENSE_ID=${{ inputs.snapshot-license-id }}
      export AIRGAP_SNAPSHOT_LICENSE_ID=${{ inputs.airgap-snapshot-license-id }}
      echo "${{ inputs.license }}" | base64 --decode > e2e/license.yaml
      echo "${{ inputs.snapshot-license }}" | base64 --decode > e2e/snapshot-license.yaml
      export DR_AWS_S3_ENDPOINT=https://s3.amazonaws.com
      export DR_AWS_S3_REGION=us-east-1
      export DR_AWS_S3_BUCKET=kots-testim-snapshots
      export DR_AWS_S3_PREFIX=${{ inputs.test-name }}-${{ github.run_id }}-${{ github.run_attempt }}
      export DR_AWS_S3_PREFIX_AIRGAP=${{ inputs.test-name }}-${{ github.run_id }}-${{ github.run_attempt }}-airgap
      export DR_AWS_ACCESS_KEY_ID=${{ inputs.dr-aws-access-key-id }}
      export DR_AWS_SECRET_ACCESS_KEY=${{ inputs.dr-aws-secret-access-key }}
      export EXPECT_K0S_VERSION=${{ inputs.k0s-version }}
      export EXPECT_K0S_VERSION_PREVIOUS=${{ inputs.k0s-version-previous }}
      make e2e-test TEST_NAME=${{ inputs.test-name }}
  - name: Upload Host Support Bundle
    uses: actions/upload-artifact@v4
    if: ${{ ! cancelled() }}
    with:
      name: ${{ inputs.test-name }}-support-bundle-host.tar.gz
      path: ./e2e/support-bundle-host-*.tar.gz
  - name: Upload Cluster Support Bundle
    uses: actions/upload-artifact@v4
    if: ${{ ! cancelled() }}
    with:
      name: ${{ inputs.test-name }}-support-bundle-cluster.tar.gz
      path: ./e2e/support-bundle-cluster.tar.gz
  - name: Upload Playwright Report
    id: upload-playwright-report
    uses: actions/upload-artifact@v4
    if: ${{ ! cancelled() }}
    with:
      name: ${{ inputs.test-name }}-playwright-report.tar.gz
      path: ./e2e/playwright-report.tar.gz
  - name: Print instructions to view Playwright report
    if: ${{ ! cancelled() && steps.upload-playwright-report.outputs.artifact-url != '' }}
    run: |
      echo -e "\e[1;33m┌──────────────────────────────────────────────────────────────────────────────────────────────────────┐\e[0m"
      echo -e "\e[1;33m                                  To view the Playwright test report:                                   \e[0m"
      echo -e "\e[1;33m                                                                                                        \e[0m"
      echo -e "\e[1;33m   1- Download & extract the report from:                                                               \e[0m"
      echo -e "\e[1;33m                                                                                                        \e[0m"
      echo -e "\e[1;34m      ${{ steps.upload-playwright-report.outputs.artifact-url }}                                        \e[0m"
      echo -e "\e[1;33m                                                                                                        \e[0m"
      echo -e "\e[1;33m   2- From inside the extracted directory, run:                                                         \e[0m"
      echo -e "\e[1;33m                                                                                                        \e[0m"
      echo -e "\e[1;32m      npx playwright show-report .                                                                      \e[0m"
      echo -e "\e[1;33m                                                                                                        \e[0m"
      echo -e "\e[1;33m└──────────────────────────────────────────────────────────────────────────────────────────────────────┘\e[0m"
    shell: bash
  # - name: Setup upterm session (ssh)
  #   uses: lhotari/action-upterm@v1
  #   if: failure()
  #   with:
  #     ## If no one connects after 5 minutes, shut down server.
  #     wait-timeout-minutes: 5
