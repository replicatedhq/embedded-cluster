components:
  schemas:
    github_com_replicatedhq_embedded-cluster_api_types.Health:
      properties:
        status:
          type: string
      type: object
    github_com_replicatedhq_kotskinds_multitype.BoolOrString:
      type: object
    types.APIError:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/types.APIError'
          type: array
          uniqueItems: false
        field:
          type: string
        message:
          type: string
        status_code:
          type: integer
      type: object
    types.AppConfig:
      properties:
        groups:
          items:
            $ref: '#/components/schemas/v1beta1.ConfigGroup'
          type: array
          uniqueItems: false
      type: object
    types.AppConfigValuesResponse:
      properties:
        values:
          additionalProperties:
            type: string
          type: object
      type: object
    types.AuthRequest:
      properties:
        password:
          type: string
      type: object
    types.AuthResponse:
      properties:
        token:
          type: string
      type: object
    types.GetListAvailableNetworkInterfacesResponse:
      properties:
        networkInterfaces:
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    types.HostPreflightsOutput:
      properties:
        fail:
          items:
            $ref: '#/components/schemas/types.HostPreflightsRecord'
          type: array
          uniqueItems: false
        pass:
          items:
            $ref: '#/components/schemas/types.HostPreflightsRecord'
          type: array
          uniqueItems: false
        warn:
          items:
            $ref: '#/components/schemas/types.HostPreflightsRecord'
          type: array
          uniqueItems: false
      type: object
    types.HostPreflightsRecord:
      properties:
        message:
          type: string
        title:
          type: string
      type: object
    types.Infra:
      properties:
        components:
          items:
            $ref: '#/components/schemas/types.InfraComponent'
          type: array
          uniqueItems: false
        logs:
          type: string
        status:
          $ref: '#/components/schemas/types.Status'
      type: object
    types.InfraComponent:
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/types.Status'
      type: object
    types.InstallHostPreflightsStatusResponse:
      properties:
        allowIgnoreHostPreflights:
          type: boolean
        output:
          $ref: '#/components/schemas/types.HostPreflightsOutput'
        status:
          $ref: '#/components/schemas/types.Status'
        titles:
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    types.KubernetesInstallationConfig:
      properties:
        adminConsolePort:
          type: integer
        httpProxy:
          type: string
        httpsProxy:
          type: string
        noProxy:
          type: string
      type: object
    types.LinuxInfraSetupRequest:
      properties:
        ignoreHostPreflights:
          type: boolean
      type: object
    types.LinuxInstallationConfig:
      properties:
        adminConsolePort:
          type: integer
        dataDirectory:
          type: string
        globalCidr:
          type: string
        httpProxy:
          type: string
        httpsProxy:
          type: string
        localArtifactMirrorPort:
          type: integer
        networkInterface:
          type: string
        noProxy:
          type: string
        podCidr:
          type: string
        serviceCidr:
          type: string
      type: object
    types.PostInstallRunHostPreflightsRequest:
      properties:
        isUi:
          type: boolean
      type: object
    types.SetAppConfigValuesRequest:
      properties:
        values:
          additionalProperties:
            type: string
          type: object
      type: object
    types.State:
      type: string
      x-enum-varnames:
      - StatePending
      - StateRunning
      - StateSucceeded
      - StateFailed
    types.Status:
      properties:
        description:
          type: string
        lastUpdated:
          type: string
        state:
          $ref: '#/components/schemas/types.State'
      type: object
    v1beta1.ConfigChildItem:
      properties:
        default:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
        name:
          type: string
        recommended:
          type: boolean
        title:
          type: string
        value:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
      type: object
    v1beta1.ConfigGroup:
      properties:
        description:
          type: string
        items:
          items:
            $ref: '#/components/schemas/v1beta1.ConfigItem'
          type: array
          uniqueItems: false
        name:
          type: string
        title:
          type: string
        when:
          type: string
      type: object
    v1beta1.ConfigItem:
      properties:
        affix:
          type: string
        countByGroup:
          additionalProperties:
            type: integer
          type: object
        data:
          type: string
        default:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
        error:
          type: string
        filename:
          type: string
        help_text:
          type: string
        hidden:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/v1beta1.ConfigChildItem'
          type: array
          uniqueItems: false
        minimumCount:
          type: integer
        multi_value:
          items:
            type: string
          type: array
          uniqueItems: false
        multiple:
          type: boolean
        name:
          type: string
        readonly:
          type: boolean
        recommended:
          type: boolean
        repeatable:
          type: boolean
        required:
          type: boolean
        templates:
          items:
            $ref: '#/components/schemas/v1beta1.RepeatTemplate'
          type: array
          uniqueItems: false
        title:
          type: string
        type:
          type: string
        validation:
          $ref: '#/components/schemas/v1beta1.ConfigItemValidation'
        value:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
        valuesByGroup:
          $ref: '#/components/schemas/v1beta1.ValuesByGroup'
        when:
          type: string
        write_once:
          type: boolean
      type: object
    v1beta1.ConfigItemValidation:
      properties:
        regex:
          $ref: '#/components/schemas/v1beta1.RegexValidator'
      type: object
    v1beta1.GroupValues:
      additionalProperties:
        type: string
      type: object
    v1beta1.RegexValidator:
      properties:
        message:
          type: string
        pattern:
          type: string
      type: object
    v1beta1.RepeatTemplate:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        name:
          type: string
        namespace:
          type: string
        yamlPath:
          type: string
      type: object
    v1beta1.ValuesByGroup:
      additionalProperties:
        $ref: '#/components/schemas/v1beta1.GroupValues'
      type: object
  securitySchemes:
    bearerauth:
      bearerFormat: JWT
      scheme: bearer
      type: http
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@replicated.com
    name: API Support
    url: https://github.com/replicatedhq/embedded-cluster/issues
  description: This is the API for the Embedded Cluster project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Embedded Cluster API
  version: "0.1"
openapi: 3.1.0
paths:
  /auth/login:
    post:
      description: Authenticate a user
      operationId: postAuthLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.AuthRequest'
        description: Auth Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AuthResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Unauthorized
      summary: Authenticate a user
      tags:
      - auth
  /console/available-network-interfaces:
    get:
      description: List available network interfaces
      operationId: getConsoleListAvailableNetworkInterfaces
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.GetListAvailableNetworkInterfacesResponse'
          description: OK
      summary: List available network interfaces
      tags:
      - console
  /health:
    get:
      description: get the health of the API
      operationId: getHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/github_com_replicatedhq_embedded-cluster_api_types.Health'
          description: OK
      summary: Get the health of the API
      tags:
      - health
  /kubernetes/install/app/config:
    get:
      description: get the app config
      operationId: getKubernetesInstallAppConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
      security:
      - bearerauth: []
      summary: Get the app config
      tags:
      - kubernetes-install
  /kubernetes/install/app/config/values:
    get:
      description: Get the app config values
      operationId: getKubernetesInstallAppConfigValues
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Get the app config values
      tags:
      - kubernetes-install
    post:
      description: Set the app config values
      operationId: postKubernetesInstallSetAppConfigValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.SetAppConfigValuesRequest'
        description: Set App Config Values Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
      security:
      - bearerauth: []
      summary: Set the app config values
      tags:
      - kubernetes-install
  /kubernetes/install/infra/setup:
    post:
      description: Setup infra components
      operationId: postKubernetesInstallSetupInfra
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Setup infra components
      tags:
      - kubernetes-install
  /kubernetes/install/infra/status:
    get:
      description: Get the current status of the infra
      operationId: getKubernetesInstallInfraStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Get the status of the infra
      tags:
      - kubernetes-install
  /kubernetes/install/installation/config:
    get:
      description: get the Kubernetes installation config
      operationId: getKubernetesInstallInstallationConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.KubernetesInstallationConfig'
          description: OK
      security:
      - bearerauth: []
      summary: Get the Kubernetes installation config
      tags:
      - kubernetes-install
  /kubernetes/install/installation/configure:
    post:
      description: configure the Kubernetes installation for install
      operationId: postKubernetesInstallConfigureInstallation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.KubernetesInstallationConfig'
        description: Installation config
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
      security:
      - bearerauth: []
      summary: Configure the Kubernetes installation for install
      tags:
      - kubernetes-install
  /kubernetes/install/installation/status:
    get:
      description: Get the current status of the installation configuration for install
      operationId: getKubernetesInstallInstallationStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
      security:
      - bearerauth: []
      summary: Get installation configuration status for install
      tags:
      - kubernetes-install
  /linux/install/app/config:
    get:
      description: get the app config
      operationId: getLinuxInstallAppConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
      security:
      - bearerauth: []
      summary: Get the app config
      tags:
      - linux-install
  /linux/install/app/config/values:
    get:
      description: Get the app config values
      operationId: getLinuxInstallAppConfigValues
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Get the app config values
      tags:
      - linux-install
    post:
      description: Set the app config values
      operationId: postLinuxInstallSetAppConfigValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.SetAppConfigValuesRequest'
        description: Set App Config Values Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
      security:
      - bearerauth: []
      summary: Set the app config values
      tags:
      - linux-install
  /linux/install/host-preflights/run:
    post:
      description: Run install host preflight checks using installation config and
        client-provided data
      operationId: postLinuxInstallRunHostPreflights
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.PostInstallRunHostPreflightsRequest'
        description: Post Install Run Host Preflights Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallHostPreflightsStatusResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Run install host preflight checks
      tags:
      - linux-install
  /linux/install/host-preflights/status:
    get:
      description: Get the current status and results of host preflight checks for
        install
      operationId: getLinuxInstallHostPreflightsStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallHostPreflightsStatusResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Get host preflight status for install
      tags:
      - linux-install
  /linux/install/infra/setup:
    post:
      description: Setup infra components
      operationId: postLinuxInstallSetupInfra
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.LinuxInfraSetupRequest'
        description: Infra Setup Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Setup infra components
      tags:
      - linux-install
  /linux/install/infra/status:
    get:
      description: Get the current status of the infra
      operationId: getLinuxInstallInfraStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Get the status of the infra
      tags:
      - linux-install
  /linux/install/installation/config:
    get:
      description: get the installation config
      operationId: getLinuxInstallInstallationConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.LinuxInstallationConfig'
          description: OK
      security:
      - bearerauth: []
      summary: Get the installation config
      tags:
      - linux-install
  /linux/install/installation/configure:
    post:
      description: configure the installation for install
      operationId: postLinuxInstallConfigureInstallation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.LinuxInstallationConfig'
        description: Installation config
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
      security:
      - bearerauth: []
      summary: Configure the installation for install
      tags:
      - linux-install
  /linux/install/installation/status:
    get:
      description: Get the current status of the installation configuration for install
      operationId: getLinuxInstallInstallationStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
      security:
      - bearerauth: []
      summary: Get installation configuration status for install
      tags:
      - linux-install
servers:
- url: /api
