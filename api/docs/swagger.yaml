components:
  schemas:
    github_com_replicatedhq_embedded-cluster_api_types.Health:
      properties:
        status:
          type: string
      type: object
    github_com_replicatedhq_kotskinds_multitype.BoolOrString:
      type: object
    types.APIError:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/types.APIError'
          type: array
          uniqueItems: false
        field:
          type: string
        message:
          type: string
        statusCode:
          type: integer
      type: object
    types.Airgap:
      properties:
        logs:
          type: string
        status:
          $ref: '#/components/schemas/types.Status'
      type: object
    types.AppConfig:
      properties:
        groups:
          items:
            $ref: '#/components/schemas/v1beta1.ConfigGroup'
          type: array
          uniqueItems: false
      type: object
    types.AppConfigValue:
      properties:
        data:
          type: string
        dataPlaintext:
          type: string
        default:
          type: string
        filename:
          type: string
        repeatableItem:
          type: string
        value:
          type: string
        valuePlaintext:
          type: string
      type: object
    types.AppConfigValues:
      additionalProperties:
        $ref: '#/components/schemas/types.AppConfigValue'
      type: object
    types.AppConfigValuesResponse:
      properties:
        values:
          $ref: '#/components/schemas/types.AppConfigValues'
      type: object
    types.AppInstall:
      properties:
        logs:
          type: string
        status:
          $ref: '#/components/schemas/types.Status'
      type: object
    types.AppUpgrade:
      properties:
        logs:
          type: string
        status:
          $ref: '#/components/schemas/types.Status'
      type: object
    types.AuthRequest:
      properties:
        password:
          type: string
      type: object
    types.AuthResponse:
      properties:
        token:
          type: string
      type: object
    types.Error:
      properties:
        code:
          description: |-
            The error code is a string that uniquely identifies an error condition. It is
            meant to be read and understood by programs that detect and handle errors by
            type. The following is a list of Amazon S3 error codes. For more information,
            see [Error responses].

              - Code: AccessDenied

              - Description: Access Denied

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: AccountProblem

              - Description: There is a problem with your Amazon Web Services account that
              prevents the action from completing successfully. Contact Amazon Web Services
              Support for further assistance.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: AllAccessDisabled

              - Description: All access to this Amazon S3 resource has been disabled.
              Contact Amazon Web Services Support for further assistance.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: AmbiguousGrantByEmailAddress

              - Description: The email address you provided is associated with more than
              one account.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: AuthorizationHeaderMalformed

              - Description: The authorization header you provided is invalid.

              - HTTP Status Code: 400 Bad Request

              - HTTP Status Code: N/A

              - Code: BadDigest

              - Description: The Content-MD5 you specified did not match what we received.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: BucketAlreadyExists

              - Description: The requested bucket name is not available. The bucket
              namespace is shared by all users of the system. Please select a different name
              and try again.

              - HTTP Status Code: 409 Conflict

              - SOAP Fault Code Prefix: Client

              - Code: BucketAlreadyOwnedByYou

              - Description: The bucket you tried to create already exists, and you own it.
              Amazon S3 returns this error in all Amazon Web Services Regions except in the
              North Virginia Region. For legacy compatibility, if you re-create an existing
              bucket that you already own in the North Virginia Region, Amazon S3 returns 200
              OK and resets the bucket access control lists (ACLs).

              - Code: 409 Conflict (in all Regions except the North Virginia Region)

              - SOAP Fault Code Prefix: Client

              - Code: BucketNotEmpty

              - Description: The bucket you tried to delete is not empty.

              - HTTP Status Code: 409 Conflict

              - SOAP Fault Code Prefix: Client

              - Code: CredentialsNotSupported

              - Description: This request does not support credentials.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: CrossLocationLoggingProhibited

              - Description: Cross-location logging not allowed. Buckets in one geographic
              location cannot log information to a bucket in another location.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: EntityTooSmall

              - Description: Your proposed upload is smaller than the minimum allowed
              object size.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: EntityTooLarge

              - Description: Your proposed upload exceeds the maximum allowed object size.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: ExpiredToken

              - Description: The provided token has expired.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: IllegalVersioningConfigurationException

              - Description: Indicates that the versioning configuration specified in the
              request is invalid.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: IncompleteBody

              - Description: You did not provide the number of bytes specified by the
              Content-Length HTTP header

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: IncorrectNumberOfFilesInPostRequest

              - Description: POST requires exactly one file upload per request.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InlineDataTooLarge

              - Description: Inline data exceeds the maximum allowed size.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InternalError

              - Description: We encountered an internal error. Please try again.

              - HTTP Status Code: 500 Internal Server Error

              - SOAP Fault Code Prefix: Server

              - Code: InvalidAccessKeyId

              - Description: The Amazon Web Services access key ID you provided does not
              exist in our records.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: InvalidAddressingHeader

              - Description: You must specify the Anonymous role.

              - HTTP Status Code: N/A

              - SOAP Fault Code Prefix: Client

              - Code: InvalidArgument

              - Description: Invalid Argument

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidBucketName

              - Description: The specified bucket is not valid.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidBucketState

              - Description: The request is not valid with the current state of the bucket.

              - HTTP Status Code: 409 Conflict

              - SOAP Fault Code Prefix: Client

              - Code: InvalidDigest

              - Description: The Content-MD5 you specified is not valid.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidEncryptionAlgorithmError

              - Description: The encryption request you specified is not valid. The valid
              value is AES256.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidLocationConstraint

              - Description: The specified location constraint is not valid. For more
              information about Regions, see [How to Select a Region for Your Buckets].

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidObjectState

              - Description: The action is not valid for the current state of the object.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: InvalidPart

              - Description: One or more of the specified parts could not be found. The
              part might not have been uploaded, or the specified entity tag might not have
              matched the part's entity tag.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidPartOrder

              - Description: The list of parts was not in ascending order. Parts list must
              be specified in order by part number.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidPayer

              - Description: All access to this object has been disabled. Please contact
              Amazon Web Services Support for further assistance.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: InvalidPolicyDocument

              - Description: The content of the form does not meet the conditions specified
              in the policy document.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidRange

              - Description: The requested range cannot be satisfied.

              - HTTP Status Code: 416 Requested Range Not Satisfiable

              - SOAP Fault Code Prefix: Client

              - Code: InvalidRequest

              - Description: Please use AWS4-HMAC-SHA256 .

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidRequest

              - Description: SOAP requests must be made over an HTTPS connection.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidRequest

              - Description: Amazon S3 Transfer Acceleration is not supported for buckets
              with non-DNS compliant names.

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidRequest

              - Description: Amazon S3 Transfer Acceleration is not supported for buckets
              with periods (.) in their names.

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidRequest

              - Description: Amazon S3 Transfer Accelerate endpoint only supports virtual
              style requests.

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidRequest

              - Description: Amazon S3 Transfer Accelerate is not configured on this bucket.

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidRequest

              - Description: Amazon S3 Transfer Accelerate is disabled on this bucket.

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidRequest

              - Description: Amazon S3 Transfer Acceleration is not supported on this
              bucket. Contact Amazon Web Services Support for more information.

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidRequest

              - Description: Amazon S3 Transfer Acceleration cannot be enabled on this
              bucket. Contact Amazon Web Services Support for more information.

              - HTTP Status Code: 400 Bad Request

              - Code: N/A

              - Code: InvalidSecurity

              - Description: The provided security credentials are not valid.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: InvalidSOAPRequest

              - Description: The SOAP request body is invalid.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidStorageClass

              - Description: The storage class you specified is not valid.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidTargetBucketForLogging

              - Description: The target bucket for logging does not exist, is not owned by
              you, or does not have the appropriate grants for the log-delivery group.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidToken

              - Description: The provided token is malformed or otherwise invalid.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: InvalidURI

              - Description: Couldn't parse the specified URI.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: KeyTooLongError

              - Description: Your key is too long.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MalformedACLError

              - Description: The XML you provided was not well-formed or did not validate
              against our published schema.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MalformedPOSTRequest

              - Description: The body of your POST request is not well-formed
              multipart/form-data.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MalformedXML

              - Description: This happens when the user sends malformed XML (XML that
              doesn't conform to the published XSD) for the configuration. The error message
              is, "The XML you provided was not well-formed or did not validate against our
              published schema."

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MaxMessageLengthExceeded

              - Description: Your request was too big.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MaxPostPreDataLengthExceededError

              - Description: Your POST request fields preceding the upload file were too
              large.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MetadataTooLarge

              - Description: Your metadata headers exceed the maximum allowed metadata size.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MethodNotAllowed

              - Description: The specified method is not allowed against this resource.

              - HTTP Status Code: 405 Method Not Allowed

              - SOAP Fault Code Prefix: Client

              - Code: MissingAttachment

              - Description: A SOAP attachment was expected, but none were found.

              - HTTP Status Code: N/A

              - SOAP Fault Code Prefix: Client

              - Code: MissingContentLength

              - Description: You must provide the Content-Length HTTP header.

              - HTTP Status Code: 411 Length Required

              - SOAP Fault Code Prefix: Client

              - Code: MissingRequestBodyError

              - Description: This happens when the user sends an empty XML document as a
              request. The error message is, "Request body is empty."

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MissingSecurityElement

              - Description: The SOAP 1.1 request is missing a security element.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: MissingSecurityHeader

              - Description: Your request is missing a required header.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: NoLoggingStatusForKey

              - Description: There is no such thing as a logging status subresource for a
              key.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: NoSuchBucket

              - Description: The specified bucket does not exist.

              - HTTP Status Code: 404 Not Found

              - SOAP Fault Code Prefix: Client

              - Code: NoSuchBucketPolicy

              - Description: The specified bucket does not have a bucket policy.

              - HTTP Status Code: 404 Not Found

              - SOAP Fault Code Prefix: Client

              - Code: NoSuchKey

              - Description: The specified key does not exist.

              - HTTP Status Code: 404 Not Found

              - SOAP Fault Code Prefix: Client

              - Code: NoSuchLifecycleConfiguration

              - Description: The lifecycle configuration does not exist.

              - HTTP Status Code: 404 Not Found

              - SOAP Fault Code Prefix: Client

              - Code: NoSuchUpload

              - Description: The specified multipart upload does not exist. The upload ID
              might be invalid, or the multipart upload might have been aborted or completed.

              - HTTP Status Code: 404 Not Found

              - SOAP Fault Code Prefix: Client

              - Code: NoSuchVersion

              - Description: Indicates that the version ID specified in the request does
              not match an existing version.

              - HTTP Status Code: 404 Not Found

              - SOAP Fault Code Prefix: Client

              - Code: NotImplemented

              - Description: A header you provided implies functionality that is not
              implemented.

              - HTTP Status Code: 501 Not Implemented

              - SOAP Fault Code Prefix: Server

              - Code: NotSignedUp

              - Description: Your account is not signed up for the Amazon S3 service. You
              must sign up before you can use Amazon S3. You can sign up at the following URL:
              [Amazon S3]

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: OperationAborted

              - Description: A conflicting conditional action is currently in progress
              against this resource. Try again.

              - HTTP Status Code: 409 Conflict

              - SOAP Fault Code Prefix: Client

              - Code: PermanentRedirect

              - Description: The bucket you are attempting to access must be addressed
              using the specified endpoint. Send all future requests to this endpoint.

              - HTTP Status Code: 301 Moved Permanently

              - SOAP Fault Code Prefix: Client

              - Code: PreconditionFailed

              - Description: At least one of the preconditions you specified did not hold.

              - HTTP Status Code: 412 Precondition Failed

              - SOAP Fault Code Prefix: Client

              - Code: Redirect

              - Description: Temporary redirect.

              - HTTP Status Code: 307 Moved Temporarily

              - SOAP Fault Code Prefix: Client

              - Code: RestoreAlreadyInProgress

              - Description: Object restore is already in progress.

              - HTTP Status Code: 409 Conflict

              - SOAP Fault Code Prefix: Client

              - Code: RequestIsNotMultiPartContent

              - Description: Bucket POST must be of the enclosure-type multipart/form-data.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: RequestTimeout

              - Description: Your socket connection to the server was not read from or
              written to within the timeout period.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: RequestTimeTooSkewed

              - Description: The difference between the request time and the server's time
              is too large.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: RequestTorrentOfBucketError

              - Description: Requesting the torrent file of a bucket is not permitted.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: SignatureDoesNotMatch

              - Description: The request signature we calculated does not match the
              signature you provided. Check your Amazon Web Services secret access key and
              signing method. For more information, see [REST Authentication]and [SOAP Authentication]for details.

              - HTTP Status Code: 403 Forbidden

              - SOAP Fault Code Prefix: Client

              - Code: ServiceUnavailable

              - Description: Service is unable to handle request.

              - HTTP Status Code: 503 Service Unavailable

              - SOAP Fault Code Prefix: Server

              - Code: SlowDown

              - Description: Reduce your request rate.

              - HTTP Status Code: 503 Slow Down

              - SOAP Fault Code Prefix: Server

              - Code: TemporaryRedirect

              - Description: You are being redirected to the bucket while DNS updates.

              - HTTP Status Code: 307 Moved Temporarily

              - SOAP Fault Code Prefix: Client

              - Code: TokenRefreshRequired

              - Description: The provided token must be refreshed.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: TooManyBuckets

              - Description: You have attempted to create more buckets than allowed.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: UnexpectedContent

              - Description: This request does not support content.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: UnresolvableGrantByEmailAddress

              - Description: The email address you provided does not match any account on
              record.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

              - Code: UserKeyMustBeSpecified

              - Description: The bucket POST must contain the specified field name. If it
              is specified, check the order of the fields.

              - HTTP Status Code: 400 Bad Request

              - SOAP Fault Code Prefix: Client

            [How to Select a Region for Your Buckets]: https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro
            [Error responses]: https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html
            [REST Authentication]: https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html
            [Amazon S3]: http://aws.amazon.com/s3
            [SOAP Authentication]: https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html
          type: string
        key:
          description: The error key.
          type: string
        message:
          description: |-
            The error message contains a generic description of the error condition in
            English. It is intended for a human audience. Simple programs display the
            message directly to the end user if they encounter an error condition they don't
            know how or don't care to handle. Sophisticated programs with more exhaustive
            error handling and proper internationalization are more likely to ignore the
            error message.
          type: string
        versionId:
          description: |-
            The version ID of the error.

            This functionality is not supported for directory buckets.
          type: string
      type: object
    types.GetListAvailableNetworkInterfacesResponse:
      properties:
        networkInterfaces:
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    types.Infra:
      properties:
        components:
          items:
            $ref: '#/components/schemas/types.InfraComponent'
          type: array
          uniqueItems: false
        logs:
          type: string
        status:
          $ref: '#/components/schemas/types.Status'
      type: object
    types.InfraComponent:
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/types.Status'
      type: object
    types.InstallAppPreflightsStatusResponse:
      properties:
        allowIgnoreAppPreflights:
          type: boolean
        hasStrictAppPreflightFailures:
          type: boolean
        output:
          $ref: '#/components/schemas/types.PreflightsOutput'
        status:
          $ref: '#/components/schemas/types.Status'
        titles:
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    types.InstallAppRequest:
      properties:
        ignoreAppPreflights:
          type: boolean
      type: object
    types.InstallHostPreflightsStatusResponse:
      properties:
        allowIgnoreHostPreflights:
          type: boolean
        output:
          $ref: '#/components/schemas/types.PreflightsOutput'
        status:
          $ref: '#/components/schemas/types.Status'
        titles:
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    types.KubernetesInstallationConfig:
      properties:
        adminConsolePort:
          type: integer
        httpProxy:
          type: string
        httpsProxy:
          type: string
        noProxy:
          type: string
      type: object
    types.KubernetesInstallationConfigResponse:
      properties:
        defaults:
          $ref: '#/components/schemas/types.KubernetesInstallationConfig'
        resolved:
          $ref: '#/components/schemas/types.KubernetesInstallationConfig'
        values:
          $ref: '#/components/schemas/types.KubernetesInstallationConfig'
      type: object
    types.LinuxInfraSetupRequest:
      properties:
        ignoreHostPreflights:
          type: boolean
      type: object
    types.LinuxInstallationConfig:
      properties:
        adminConsolePort:
          type: integer
        dataDirectory:
          type: string
        globalCidr:
          type: string
        httpProxy:
          type: string
        httpsProxy:
          type: string
        localArtifactMirrorPort:
          type: integer
        networkInterface:
          type: string
        noProxy:
          type: string
        podCidr:
          type: string
        serviceCidr:
          type: string
      type: object
    types.LinuxInstallationConfigResponse:
      properties:
        defaults:
          $ref: '#/components/schemas/types.LinuxInstallationConfig'
        resolved:
          $ref: '#/components/schemas/types.LinuxInstallationConfig'
        values:
          $ref: '#/components/schemas/types.LinuxInstallationConfig'
      type: object
    types.PatchAppConfigValuesRequest:
      properties:
        values:
          $ref: '#/components/schemas/types.AppConfigValues'
      type: object
    types.PostInstallRunHostPreflightsRequest:
      properties:
        isUi:
          type: boolean
      type: object
    types.PreflightsOutput:
      properties:
        fail:
          items:
            $ref: '#/components/schemas/types.PreflightsRecord'
          type: array
          uniqueItems: false
        pass:
          items:
            $ref: '#/components/schemas/types.PreflightsRecord'
          type: array
          uniqueItems: false
        warn:
          items:
            $ref: '#/components/schemas/types.PreflightsRecord'
          type: array
          uniqueItems: false
      type: object
    types.PreflightsRecord:
      properties:
        message:
          type: string
        strict:
          type: boolean
        title:
          type: string
      type: object
    types.State:
      enum:
      - Pending
      - Running
      - Succeeded
      - Failed
      example: Succeeded
      type: string
      x-enum-varnames:
      - StatePending
      - StateRunning
      - StateSucceeded
      - StateFailed
    types.Status:
      properties:
        description:
          type: string
        lastUpdated:
          type: string
        state:
          $ref: '#/components/schemas/types.State'
      type: object
    types.TemplateAppConfigRequest:
      properties:
        values:
          $ref: '#/components/schemas/types.AppConfigValues'
      type: object
    types.UpgradeAppPreflightsStatusResponse:
      properties:
        allowIgnoreAppPreflights:
          type: boolean
        hasStrictAppPreflightFailures:
          type: boolean
        output:
          $ref: '#/components/schemas/types.PreflightsOutput'
        status:
          $ref: '#/components/schemas/types.Status'
        titles:
          items:
            type: string
          type: array
          uniqueItems: false
      type: object
    types.UpgradeAppRequest:
      properties:
        ignoreAppPreflights:
          type: boolean
      type: object
    v1beta1.ConfigChildItem:
      properties:
        default:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
        name:
          type: string
        recommended:
          type: boolean
        title:
          type: string
        value:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
      type: object
    v1beta1.ConfigGroup:
      properties:
        description:
          type: string
        items:
          items:
            $ref: '#/components/schemas/v1beta1.ConfigItem'
          type: array
          uniqueItems: false
        name:
          type: string
        title:
          type: string
        when:
          type: string
      type: object
    v1beta1.ConfigItem:
      properties:
        affix:
          type: string
        countByGroup:
          additionalProperties:
            type: integer
          type: object
        data:
          type: string
        default:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
        error:
          type: string
        filename:
          type: string
        help_text:
          type: string
        hidden:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/v1beta1.ConfigChildItem'
          type: array
          uniqueItems: false
        minimumCount:
          type: integer
        multi_value:
          items:
            type: string
          type: array
          uniqueItems: false
        multiple:
          type: boolean
        name:
          type: string
        readonly:
          type: boolean
        recommended:
          type: boolean
        repeatable:
          type: boolean
        required:
          type: boolean
        templates:
          items:
            $ref: '#/components/schemas/v1beta1.RepeatTemplate'
          type: array
          uniqueItems: false
        title:
          type: string
        type:
          type: string
        validation:
          $ref: '#/components/schemas/v1beta1.ConfigItemValidation'
        value:
          $ref: '#/components/schemas/github_com_replicatedhq_kotskinds_multitype.BoolOrString'
        valuesByGroup:
          $ref: '#/components/schemas/v1beta1.ValuesByGroup'
        when:
          type: string
        write_once:
          type: boolean
      type: object
    v1beta1.ConfigItemValidation:
      properties:
        regex:
          $ref: '#/components/schemas/v1beta1.RegexValidator'
      type: object
    v1beta1.GroupValues:
      additionalProperties:
        type: string
      type: object
    v1beta1.RegexValidator:
      properties:
        message:
          type: string
        pattern:
          type: string
      type: object
    v1beta1.RepeatTemplate:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        name:
          type: string
        namespace:
          type: string
        yamlPath:
          type: string
      type: object
    v1beta1.ValuesByGroup:
      additionalProperties:
        $ref: '#/components/schemas/v1beta1.GroupValues'
      type: object
  securitySchemes:
    bearerauth:
      bearerFormat: JWT
      scheme: bearer
      type: http
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@replicated.com
    name: API Support
    url: https://github.com/replicatedhq/embedded-cluster/issues
  description: This is the API for the Embedded Cluster project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Embedded Cluster API
  version: "0.1"
openapi: 3.1.0
paths:
  /auth/login:
    post:
      description: Authenticate a user
      operationId: postAuthLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.AuthRequest'
        description: Auth Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AuthResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Unauthorized
      summary: Authenticate a user
      tags:
      - auth
  /console/available-network-interfaces:
    get:
      description: List available network interfaces
      operationId: getConsoleListAvailableNetworkInterfaces
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.GetListAvailableNetworkInterfacesResponse'
          description: OK
      summary: List available network interfaces
      tags:
      - console
  /health:
    get:
      description: get the health of the API
      operationId: getHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/github_com_replicatedhq_embedded-cluster_api_types.Health'
          description: OK
      summary: Get the health of the API
      tags:
      - health
  /kubernetes/install/app-preflights/run:
    post:
      description: Run install app preflight checks using current app configuration
      operationId: postKubernetesInstallRunAppPreflights
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Run install app preflight checks
      tags:
      - kubernetes-install
  /kubernetes/install/app-preflights/status:
    get:
      description: Get the current status and results of app preflight checks for
        install
      operationId: getKubernetesInstallAppPreflightsStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app preflight status for install
      tags:
      - kubernetes-install
  /kubernetes/install/app/config/template:
    post:
      description: Template the app config with provided values and return the templated
        config
      operationId: postKubernetesInstallTemplateAppConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.TemplateAppConfigRequest'
        description: Template App Config Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Template the app config with provided values
      tags:
      - kubernetes-install
  /kubernetes/install/app/config/values:
    get:
      description: Get the current app config values
      operationId: getKubernetesInstallAppConfigValues
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get the app config values
      tags:
      - kubernetes-install
    patch:
      description: Set the app config values with partial updates
      operationId: patchKubernetesInstallAppConfigValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.PatchAppConfigValuesRequest'
        description: Patch App Config Values Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Set the app config values
      tags:
      - kubernetes-install
  /kubernetes/install/app/install:
    post:
      description: Install the app using current configuration
      operationId: postKubernetesInstallApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.InstallAppRequest'
        description: Install App Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppInstall'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Install the app
      tags:
      - kubernetes-install
  /kubernetes/install/app/status:
    get:
      description: Get the current status of app installation
      operationId: getKubernetesInstallAppStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppInstall'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app install status
      tags:
      - kubernetes-install
  /kubernetes/install/infra/setup:
    post:
      description: Setup infra components
      operationId: postKubernetesInstallSetupInfra
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Setup infra components
      tags:
      - kubernetes-install
  /kubernetes/install/infra/status:
    get:
      description: Get the current status of the infra
      operationId: getKubernetesInstallInfraStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Get the status of the infra
      tags:
      - kubernetes-install
  /kubernetes/install/installation/config:
    get:
      description: get the Kubernetes installation config
      operationId: getKubernetesInstallInstallationConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.KubernetesInstallationConfigResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Get the Kubernetes installation config
      tags:
      - kubernetes-install
  /kubernetes/install/installation/configure:
    post:
      description: configure the Kubernetes installation for install
      operationId: postKubernetesInstallConfigureInstallation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.KubernetesInstallationConfig'
        description: Installation config
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Configure the Kubernetes installation for install
      tags:
      - kubernetes-install
  /kubernetes/install/installation/status:
    get:
      description: Get the current status of the installation configuration for install
      operationId: getKubernetesInstallInstallationStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
      security:
      - bearerauth: []
      summary: Get installation configuration status for install
      tags:
      - kubernetes-install
  /kubernetes/upgrade/app-preflights/run:
    post:
      description: Run upgrade app preflight checks using current app configuration
      operationId: postKubernetesUpgradeRunAppPreflights
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.UpgradeAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Run upgrade app preflight checks
      tags:
      - kubernetes-upgrade
  /kubernetes/upgrade/app-preflights/status:
    get:
      description: Get the current status and results of app preflight checks for
        upgrade
      operationId: getKubernetesUpgradeAppPreflightsStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.UpgradeAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app preflight status for upgrade
      tags:
      - kubernetes-upgrade
  /kubernetes/upgrade/app/config/template:
    post:
      description: Template the app configuration with values for upgrade
      operationId: postKubernetesUpgradeAppConfigTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.TemplateAppConfigRequest'
        description: Template App Config Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Template app config for upgrade
      tags:
      - kubernetes-upgrade
  /kubernetes/upgrade/app/config/values:
    get:
      description: Get the current app config values for upgrade
      operationId: getKubernetesUpgradeAppConfigValues
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get the app config values for upgrade
      tags:
      - kubernetes-upgrade
    patch:
      description: Set the app config values with partial updates for upgrade
      operationId: patchKubernetesUpgradeAppConfigValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.PatchAppConfigValuesRequest'
        description: Patch App Config Values Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Set the app config values for upgrade
      tags:
      - kubernetes-upgrade
  /kubernetes/upgrade/app/status:
    get:
      description: Get the current status of app upgrade
      operationId: getKubernetesUpgradeAppStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppUpgrade'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app upgrade status
      tags:
      - kubernetes-upgrade
  /kubernetes/upgrade/app/upgrade:
    post:
      description: Upgrade the app using current configuration
      operationId: postKubernetesUpgradeApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.UpgradeAppRequest'
        description: Upgrade App Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppUpgrade'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Upgrade the app
      tags:
      - kubernetes-upgrade
  /linux/install/airgap/process:
    post:
      description: Process the airgap bundle for install
      operationId: postLinuxInstallProcessAirgap
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Airgap'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Process the airgap bundle
      tags:
      - linux-install
  /linux/install/airgap/status:
    get:
      description: Get the current status of the airgap processing for install
      operationId: getLinuxInstallAirgapStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Airgap'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get the status of the airgap processing
      tags:
      - linux-install
  /linux/install/app-preflights/run:
    post:
      description: Run install app preflight checks using current app configuration
      operationId: postLinuxInstallRunAppPreflights
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Run install app preflight checks
      tags:
      - linux-install
  /linux/install/app-preflights/status:
    get:
      description: Get the current status and results of app preflight checks for
        install
      operationId: getLinuxInstallAppPreflightsStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app preflight status for install
      tags:
      - linux-install
  /linux/install/app/config/template:
    post:
      description: Template the app config with provided values and return the templated
        config
      operationId: postLinuxInstallTemplateAppConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.TemplateAppConfigRequest'
        description: Template App Config Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Template the app config with provided values
      tags:
      - linux-install
  /linux/install/app/config/values:
    get:
      description: Get the current app config values
      operationId: getLinuxInstallAppConfigValues
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get the app config values
      tags:
      - linux-install
    patch:
      description: Set the app config values with partial updates
      operationId: patchLinuxInstallAppConfigValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.PatchAppConfigValuesRequest'
        description: Patch App Config Values Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Set the app config values
      tags:
      - linux-install
  /linux/install/app/install:
    post:
      description: Install the app using current configuration
      operationId: postLinuxInstallApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.InstallAppRequest'
        description: Install App Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppInstall'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Install the app
      tags:
      - linux-install
  /linux/install/app/status:
    get:
      description: Get the current status of app installation
      operationId: getLinuxInstallAppStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppInstall'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app install status
      tags:
      - linux-install
  /linux/install/host-preflights/run:
    post:
      description: Run install host preflight checks using installation config and
        client-provided data
      operationId: postLinuxInstallRunHostPreflights
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.PostInstallRunHostPreflightsRequest'
        description: Post Install Run Host Preflights Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallHostPreflightsStatusResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Run install host preflight checks
      tags:
      - linux-install
  /linux/install/host-preflights/status:
    get:
      description: Get the current status and results of host preflight checks for
        install
      operationId: getLinuxInstallHostPreflightsStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.InstallHostPreflightsStatusResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Get host preflight status for install
      tags:
      - linux-install
  /linux/install/infra/setup:
    post:
      description: Setup infra components
      operationId: postLinuxInstallSetupInfra
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.LinuxInfraSetupRequest'
        description: Infra Setup Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Setup infra components
      tags:
      - linux-install
  /linux/install/infra/status:
    get:
      description: Get the current status of the infra
      operationId: getLinuxInstallInfraStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
      security:
      - bearerauth: []
      summary: Get the status of the infra
      tags:
      - linux-install
  /linux/install/installation/config:
    get:
      description: get the installation config
      operationId: getLinuxInstallInstallationConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.LinuxInstallationConfigResponse'
          description: OK
      security:
      - bearerauth: []
      summary: Get the installation config
      tags:
      - linux-install
  /linux/install/installation/configure:
    post:
      description: configure the installation for install
      operationId: postLinuxInstallConfigureInstallation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.LinuxInstallationConfig'
        description: Installation config
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Configure the installation for install
      tags:
      - linux-install
  /linux/install/installation/status:
    get:
      description: Get the current status of the installation configuration for install
      operationId: getLinuxInstallInstallationStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Status'
          description: OK
      security:
      - bearerauth: []
      summary: Get installation configuration status for install
      tags:
      - linux-install
  /linux/upgrade/airgap/process:
    post:
      description: Process the airgap bundle for upgrade
      operationId: postLinuxUpgradeProcessAirgap
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Airgap'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Process the airgap bundle
      tags:
      - linux-upgrade
  /linux/upgrade/airgap/status:
    get:
      description: Get the current status of the airgap processing for upgrade
      operationId: getLinuxUpgradeAirgapStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Airgap'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get the status of the airgap processing
      tags:
      - linux-upgrade
  /linux/upgrade/app-preflights/run:
    post:
      description: Run upgrade app preflight checks using current app configuration
      operationId: postLinuxUpgradeRunAppPreflights
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.UpgradeAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Run upgrade app preflight checks
      tags:
      - linux-upgrade
  /linux/upgrade/app-preflights/status:
    get:
      description: Get the current status and results of app preflight checks for
        upgrade
      operationId: getLinuxUpgradeAppPreflightsStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.UpgradeAppPreflightsStatusResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app preflight status for upgrade
      tags:
      - linux-upgrade
  /linux/upgrade/app/config/template:
    post:
      description: Template the app configuration with values for upgrade
      operationId: postLinuxUpgradeAppConfigTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.TemplateAppConfigRequest'
        description: Template App Config Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfig'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Template app config for upgrade
      tags:
      - linux-upgrade
  /linux/upgrade/app/config/values:
    get:
      description: Get the current app config values for upgrade
      operationId: getLinuxUpgradeAppConfigValues
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get the app config values for upgrade
      tags:
      - linux-upgrade
    patch:
      description: Set the app config values with partial updates for upgrade
      operationId: patchLinuxUpgradeAppConfigValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.PatchAppConfigValuesRequest'
        description: Patch App Config Values Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppConfigValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Set the app config values for upgrade
      tags:
      - linux-upgrade
  /linux/upgrade/app/status:
    get:
      description: Get the current status of app upgrade
      operationId: getLinuxUpgradeAppStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppUpgrade'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Get app upgrade status
      tags:
      - linux-upgrade
  /linux/upgrade/app/upgrade:
    post:
      description: Upgrade the app using current configuration
      operationId: postLinuxUpgradeApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.UpgradeAppRequest'
        description: Upgrade App Request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.AppUpgrade'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.APIError'
          description: Bad Request
      security:
      - bearerauth: []
      summary: Upgrade the app
      tags:
      - linux-upgrade
  /linux/upgrade/infra/status:
    get:
      description: Get the current status of the infrastructure upgrade
      operationId: getLinuxUpgradeInfraStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Error'
          description: Internal Server Error
      security:
      - bearerauth: []
      summary: Get the status of the infra upgrade
      tags:
      - linux-upgrade
  /linux/upgrade/infra/upgrade:
    post:
      description: Upgrade the infrastructure (k0s, addons, extensions)
      operationId: postLinuxUpgradeInfra
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Infra'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Error'
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Error'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.Error'
          description: Internal Server Error
      security:
      - bearerauth: []
      summary: Upgrade the infrastructure
      tags:
      - linux-upgrade
servers:
- url: /api
