# adapted from:
#   https://github.com/wolfi-dev/os/blob/1ab81f12c9d149962d3cf958a8185b3ce5373727/distribution.yaml
package:
  name: distribution-local
  version: 2.8.3
  epoch: 0
  description: The toolkit to pack, ship, store, and deliver container content
  copyright:
    - license: Apache-2.0

environment:
  contents:
    repositories:
      - https://packages.wolfi.dev/os
    keyring:
      - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    packages:
      - busybox
      - ca-certificates-bundle
      - go
  environment:
    CGO_ENABLED: "0"

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 4772604ae973031ab32dd9805a4bccf61d94909f
      repository: https://github.com/docker/distribution
      tag: v${{package.version}}

  - runs: |
      mkdir -p $GOPATH/src/github.com/docker/distribution
      mv * $GOPATH/src/github.com/docker/distribution
      cd $GOPATH/src/github.com/docker/distribution

      GO111MODULE=off make

      mkdir -p ${{targets.contextdir}}/
      mkdir -p ${{targets.contextdir}}/usr/bin
      mkdir -p ${{targets.contextdir}}/etc/docker/registry
      mkdir -p ${{targets.contextdir}}/var/lib/registry

      install -Dm755 ./bin/registry ${{targets.contextdir}}/usr/bin/registry
      install -Dm755 ./bin/digest ${{targets.contextdir}}/usr/bin/digest
      install -Dm755 ./bin/registry-api-descriptor-template ${{targets.contextdir}}/usr/bin/registry-api-descriptor-template

      cp ./cmd/registry/config-example.yml ${{targets.contextdir}}/etc/docker/registry/config.yml

  - uses: strip

subpackages:
  - name: "${{package.name}}-compat"
    # https://github.com/twuni/docker-registry.helm/blob/541f368966fd1d1ecbd17183acaa76e6105d8677/templates/deployment.yaml#L61-L63
    description: "Compatibility package to place binaries in the location expected by upstream helm charts"
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/bin
          ln -sf /usr/bin/registry ${{targets.contextdir}}/bin/registry

test:
  environment:
    contents:
      packages:
        - crane
  pipeline:
    - runs: |
        #!/bin/bash

        # Define image names and registry
        SOURCE_IMAGE="cgr.dev/chainguard/busybox:latest"
        LOCAL_REGISTRY="localhost:5000"
        TARGET_IMAGE="${LOCAL_REGISTRY}/busybox:latest"

        # Function to check if the previous command was successful
        check_success() {
            if [ $? -ne 0 ]; then
                echo "Error: $1"
                exit 1
            fi
        }

        # Start the local Docker registry using the binary
        echo "Starting local Docker registry..."
        mkdir -p /etc/docker/registry
        mkdir -p /var/lib/registry
        cat <<'EOF' > /etc/docker/registry/config.yml
        version: 0.1
        log:
          level: debug
          fields:
            service: registry
            environment: development
        storage:
            delete:
              enabled: true
            cache:
                blobdescriptor: inmemory
            filesystem:
                rootdirectory: /var/lib/registry
            tag:
              concurrencylimit: 5
        http:
            addr: :5000
            debug:
                addr: :5001
                prometheus:
                    enabled: true
                    path: /metrics
        health:
          storagedriver:
            enabled: true
            interval: 10s
            threshold: 3
        EOF
        registry serve /etc/docker/registry/config.yml &
        REGISTRY_PID=$!
        check_success "Failed to start local Docker registry"

        # Wait for the registry to be ready
        echo "Waiting for the registry to become ready..."
        sleep 5

        # Pull the source image
        echo "Pulling image ${SOURCE_IMAGE}..."
        crane pull ${SOURCE_IMAGE} ./busybox.tar
        check_success "Failed to pull image ${SOURCE_IMAGE}"

        # Push the image to the local registry
        echo "Pushing image to ${TARGET_IMAGE}..."
        crane push ./busybox.tar ${TARGET_IMAGE}
        check_success "Failed to push image to ${TARGET_IMAGE}"

        # Clean up the tar file
        rm ./busybox.tar

        # Stop the local Docker registry
        echo "Stopping the local Docker registry..."
        kill $REGISTRY_PID
        check_success "Failed to stop local Docker registry"

        echo "Test completed successfully!"