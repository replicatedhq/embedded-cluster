apiVersion: troubleshoot.sh/v1beta2
kind: HostPreflight
metadata:
  name: ec-cluster-preflight
spec:
  collectors:
    - diskUsage:
        collectorName: root-disk-usage
        path: /
    - diskUsage:
        collectorName: embedded-cluster-path-usage
        path: /var/lib/embedded-cluster
    - diskUsage:
        collectorName: k0s-path-usage
        path: /var/lib/k0s
    - diskUsage:
        collectorName: openebs-path-usage
        path: /var/openebs
    - diskUsage:
        collectorName: tmp-path-usage
        path: /tmp
    - memory: {}
    - cpu: {}
    - time: {}
    - ipv4Interfaces: {}
    - run:
        collectorName: 'ip-route-table'
        command: 'ip'
        args: ['route']
    # External k0s runtime dependencies
    # https://docs.k0sproject.io/stable/external-runtime-deps/
    - cgroups: {}
    - run:
        collectorName: 'check-proc-filesystem'
        command: 'sh'
        args: ['-c', 'stat -f -c "%T" /proc']
    - run:
        collectorName: 'check-modprobe'
        command: 'sh'
        args: ['-c', 'command -v modprobe']
    - run:
        collectorName: 'check-mount'
        command: 'sh'
        args: ['-c', 'command -v mount']
    - run:
        collectorName: 'check-umount'
        command: 'sh'
        args: ['-c', 'command -v umount']
    - hostOS: {}
    - http:
        collectorName: http-replicated-app
        get:
          url: '{{ .ReplicatedAPIURL }}'
          timeout: 5s
        exclude: '{{ or .IsAirgap (eq .ReplicatedAPIURL "") }}'
    - http:
        collectorName: http-proxy-replicated-com
        get:
          url: '{{ .ProxyRegistryURL }}/v2/'
          timeout: 5s
        exclude: '{{ or .IsAirgap (eq .ProxyRegistryURL "") }}'
    - run:
        collectorName: resolv.conf
        command: 'sh'
        args: ['-c', 'cat /etc/resolv.conf']
    - filesystemPerformance:
        collectorName: filesystem-write-latency-etcd
        timeout: 5m
        directory: /var/lib/k0s/etcd
        fileSize: 22Mi
        operationSize: 2300
        datasync: true
        runTime: "0" # let it run to completion
  analyzers:
    - cpu:
        checkName: CPU
        outcomes:
          - fail:
              when: 'count < 2'
              message: At least 2 CPU cores are required, but fewer are present
          - pass:
              message: At least 2 CPU cores are present
    - memory:
        checkName: Memory
        outcomes:
          - fail:
              when: '< 2G'
              message: At least 2GB of memory is required, but less is present
          - pass:
              message: At least 2GB of memory is present
    - diskUsage:
        checkName: Embedded Cluster Disk Space
        collectorName: embedded-cluster-path-usage
        outcomes:
          - fail:
              when: 'total < 40Gi'
              message: The filesystem at /var/lib/embedded-cluster has less than 40Gi of total space
          - pass:
              message: The filesystem at /var/lib/embedded-cluster has sufficient space
    - diskUsage:
        checkName: k0s Disk Space
        collectorName: k0s-path-usage
        outcomes:
          - fail:
              when: 'total < 40Gi'
              message: The filesystem at /var/lib/k0s has less than 40Gi of total space
          - fail:
              when: 'used/total > 80%'
              message: The filesystem at /var/lib/k0s is more than 80% full
          - pass:
              message: The filesystem at /var/lib/k0s has sufficient space
    - diskUsage:
        checkName: OpenEBS Disk Space
        collectorName: openebs-path-usage
        outcomes:
          - fail:
              when: 'total < 5Gi'
              message: The filesystem at /var/openebs has less than 5Gi of total space
          - pass:
              message: The filesystem at /var/openebs has sufficient space
    - diskUsage:
        checkName: tmp Disk Space
        collectorName: tmp-path-usage
        outcomes:
          - fail:
              when: 'total < 5Gi'
              message: The filesystem at /tmp has less than 5Gi of total space
          - pass:
              message: The filesystem at /tmp has sufficient space
    - textAnalyze:
        checkName: Default Route
        fileName: host-collectors/run-host/ip-route-table.txt
        regex: 'default'
        outcomes:
          - fail:
              when: 'false'
              message: A default route is required in the main routing table. Add a default route to continue.
          - pass:
              when: 'true'
              message: Default route found in the main routing table
    - ipv4Interfaces:
        checkName: IPv4 Interface
        outcomes:
          - fail:
              when: 'count == 0'
              message: No IPv4 interfaces detected. Add an IPv4 interface to continue.
          - pass:
              when: 'count >= 1'
              message: IPv4 interface detected
    - time:
        checkName: System Clock
        outcomes:
          - fail:
              when: 'ntp == unsynchronized+inactive'
              message: NTP is inactive and the system clock is not synchronized. Enable NTP and synchronize the system clock to continue.
          - fail:
              when: 'ntp == unsynchronized+active'
              message: NTP is enabled but the system clock is not synchronized. Synchronize the system clock to continue.
          - pass:
              when: 'ntp == synchronized+active'
              message: NTP is enabled and the system clock is synchronized
    - jsonCompare:
        checkName: Cgroups
        fileName: host-collectors/system/cgroups.json
        path: 'cgroup-enabled'
        value: |
          true
        outcomes:
          - fail:
              when: 'false'
              message: cgroup v1 or v2 must be enabled to continue
          - pass:
              when: 'true'
              message: One of cgroup v1 or v2 is enabled
    - jsonCompare:
        checkName: "'cpu' Cgroup Controller"
        fileName: host-collectors/system/cgroups.json
        jsonPath: "{$.allControllers[?(@ == 'cpu')]}"
        value: |
          "cpu"
        outcomes:
          - fail:
              when: 'false'
              message: "'cpu' cgroup controller is not enabled"
          - pass:
              when: 'true'
              message: "'cpu' cgroup controller is enabled"
    - jsonCompare:
        checkName: "'cpuacct' Cgroup Controller"
        fileName: host-collectors/system/cgroups.json
        jsonPath: "{$.allControllers[?(@ == 'cpuacct')]}"
        value: |
          "cpuacct"
        outcomes:
          - fail:
              when: 'false'
              message: "'cpuacct' cgroup controller is not enabled"
          - pass:
              when: 'true'
              message: "'cpuacct' cgroup controller is enabled"
    - jsonCompare:
        checkName: "'cpuset' Cgroup Controller"
        fileName: host-collectors/system/cgroups.json
        jsonPath: "{$.allControllers[?(@ == 'cpuset')]}"
        value: |
          "cpuset"
        outcomes:
          - fail:
              when: 'false'
              message: "'cpuset' cgroup controller is not enabled"
          - pass:
              when: 'true'
              message: "'cpuset' cgroup controller is enabled"
    - jsonCompare:
        checkName: "'memory' Cgroup Controller"
        fileName: host-collectors/system/cgroups.json
        jsonPath: "{$.allControllers[?(@ == 'memory')]}"
        value: |
          "memory"
        outcomes:
          - fail:
              when: 'false'
              message: "'memory' cgroup controller is not enabled"
          - pass:
              when: 'true'
              message: "'memory' cgroup controller is enabled"
    - jsonCompare:
        checkName: "'devices' Cgroup Controller"
        fileName: host-collectors/system/cgroups.json
        jsonPath: "{$.allControllers[?(@ == 'devices')]}"
        value: |
          "devices"
        outcomes:
          - fail:
              when: 'false'
              message: "'devices' cgroup controller is not enabled"
          - pass:
              when: 'true'
              message: "'devices' cgroup controller is enabled"
    - jsonCompare:
        checkName: "'freezer' Cgroup Controller"
        fileName: host-collectors/system/cgroups.json
        jsonPath: "{$.allControllers[?(@ == 'freezer')]}"
        value: |
          "freezer"
        outcomes:
          - fail:
              when: 'false'
              message: "'freezer' cgroup controller is not enabled"
          - pass:
              when: 'true'
              message: "'freezer' cgroup controller is enabled"
    - jsonCompare:
        checkName: "'pids' Cgroup Controller"
        fileName: host-collectors/system/cgroups.json
        jsonPath: "{$.allControllers[?(@ == 'pids')]}"
        value: |
          "pids"
        outcomes:
          - fail:
              when: 'false'
              message: "'pids' cgroup controller is not enabled"
          - pass:
              when: 'true'
              message: "'pids' cgroup controller is enabled"
    - textAnalyze:
        checkName: /proc Filesystem
        fileName: host-collectors/run-host/check-proc-filesystem.txt
        regex: 'proc'
        outcomes:
          - pass:
              when: "true"
              message: /proc filesystem is mounted
          - fail:
              when: "false"
              message: /proc filesystem must be mounted, but it currently is not
    - textAnalyze:
        checkName: "'modprobe' Command"
        fileName: host-collectors/run-host/check-modprobe.txt
        regex: 'modprobe'
        outcomes:
          - pass:
              when: "true"
              message: "'modprobe' command exists in PATH"
          - fail:
              when: "false"
              message: "'modprobe' command must exist in PATH"
    - textAnalyze:
        checkName: "'mount' Command"
        fileName: host-collectors/run-host/check-mount.txt
        regex: 'mount'
        outcomes:
          - pass:
              when: "true"
              message: "'mount' command exists in PATH"
          - fail:
              when: "false"
              message: "'mount' command must exist in PATH"
    - textAnalyze:
        checkName: "'umount' Command"
        fileName: host-collectors/run-host/check-umount.txt
        regex: 'umount'
        outcomes:
          - pass:
              when: "true"
              message: "'umount' command exists in PATH"
          - fail:
              when: "false"
              message: "'umount' command must exist in PATH"
    - hostOS:
        checkName: Kernel Version
        outcomes:
          - pass:
              when: "kernelVersion >= 3.10"
              message: Kernel version is at least 3.10
          - fail:
              message: Kernel version must be at least 3.10
    - http:
        checkName: API Access
        collectorName: http-replicated-app
        exclude: '{{ or .IsAirgap (eq .ReplicatedAPIURL "") }}'
        outcomes:
          - fail:
              when: error
              message: >
                Error connecting to {{ .ReplicatedAPIURL }}.
                Ensure your firewall is properly configured, and use the --http-proxy, --https-proxy,
                and --no-proxy flags if there is a proxy server.
                The static IP addresses for {{ .ReplicatedAPIURL }} are
                162.159.133.41 and 162.159.134.41.
          - pass:
              when: 'statusCode == 200'
              message: 'Connected to {{ .ReplicatedAPIURL }}'
          - fail:
              message: >
                Error connecting to {{ .ReplicatedAPIURL }}.
                Ensure your firewall is properly configured, and use the --http-proxy, --https-proxy,
                and --no-proxy flags if there is a proxy server.
                The static IP addresses for {{ .ReplicatedAPIURL }} are
                162.159.133.41 and 162.159.134.41.
    - http:
        checkName: Proxy Registry Access
        collectorName: http-proxy-replicated-com
        exclude: '{{ or .IsAirgap (eq .ProxyRegistryURL "") }}'
        outcomes:
          - fail:
              when: error
              message: >
                Error connecting to {{ .ProxyRegistryURL }}.
                Ensure your firewall is properly configured, and use the --http-proxy, --https-proxy,
                and --no-proxy flags if there is a proxy server.
                The static IP addresses for {{ .ProxyRegistryURL }} are
                162.159.137.43 and 162.159.138.43.
          - pass:
              when: 'statusCode == 401'
              message: 'Connected to {{ .ProxyRegistryURL }}'
          - fail:
              message: >
                Unexpected response from {{ .ProxyRegistryURL }}.
                Ensure your firewall is properly configured, and use the --http-proxy, --https-proxy,
                and --no-proxy flags if there is a proxy server.
                The static IP addresses for {{ .ProxyRegistryURL }} are
                162.159.137.43 and 162.159.138.43.
    - textAnalyze:
        checkName: Resolver Configuration
        fileName: host-collectors/run-host/resolv.conf.txt
        regex: 'nameserver\s*(localhost|127\.0\.0\.1)'
        outcomes:
          - fail:
              when: "true"
              message: "Neither 'nameserver localhost' nor 'nameserver 127.0.0.1' can be present in resolv.conf. Remove them to continue."
          - pass:
              when: "false"
              message: "Neither 'nameserver localhost' nor 'nameserver 127.0.01' is present in resolv.conf"
    - filesystemPerformance:
        checkName: Filesystem Write Latency
        collectorName: filesystem-write-latency-etcd
        outcomes:
          - pass:
              when: "p99 < 10ms"
              message: 'P99 write latency for the disk at /var/lib/k0s/etcd is {{ "{{" }} .P99 {{ "}}" }}, which is better than the 10 ms requirement.'
          - fail:
              message: 'P99 write latency for the disk at /var/lib/k0s/etcd is {{ "{{" }} .P99 {{ "}}" }}, but it must be less than 10 ms. A higher-performance disk is required.'
