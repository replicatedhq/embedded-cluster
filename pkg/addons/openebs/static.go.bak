// Package openebs manages the OpenEBS storage provisioner helm chart
// installation or upgrade in the cluster.
package openebs

import (
	_ "embed"
	"fmt"

	"gopkg.in/yaml.v2"

	"github.com/replicatedhq/embedded-cluster/pkg/release"
)

var (
	//go:embed static/values.yaml
	rawvalues []byte
	// helmValues is the unmarshal version of rawvalues.
	helmValues map[string]interface{}
	//go:embed static/metadata.yaml
	rawmetadata []byte
	// Metadata is the unmarchal version of rawmetadata.
	metadata release.AddonMetadata
)

func init() {
	if err := yaml.Unmarshal(rawmetadata, &metadata); err != nil {
		panic(fmt.Sprintf("unable to unmarshal metadata: %v", err))
	}

	helmValues = make(map[string]interface{})
	if err := yaml.Unmarshal(rawvalues, &helmValues); err != nil {
		panic(fmt.Sprintf("unable to unmarshal metadata: %v", err))
	}
}

func Metadata() release.AddonMetadata {
	return metadata
}

func HelmValues() map[string]interface{} {
	return helmValues
}
