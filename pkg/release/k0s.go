package release

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"gopkg.in/yaml.v3"
)

const k0sMetadataPreface = `#
# this file is automatically generated by buildtools. manual edits are not recommended.
# to regenerate this file, run the following commands:
#
# $ make buildtools
# $ output/bin/buildtools update images k0s
#
`

type K0sMetadata struct {
	Images map[string]K0sImage `yaml:"images"`
}

type K0sImage struct {
	Image   string `yaml:"image"`
	Version string `yaml:"version"`
}

func (i K0sImage) URI() string {
	return fmt.Sprintf("%s:%s", i.Image, i.Version)
}

func (a *K0sMetadata) Save() error {
	buf := bytes.NewBufferString(k0sMetadataPreface)
	if err := yaml.NewEncoder(buf).Encode(a); err != nil {
		return fmt.Errorf("failed to encode k0s metadata: %w", err)
	}
	fpath := filepath.Join("pkg", "config", "static", "metadata.yaml")
	if err := os.WriteFile(fpath, buf.Bytes(), 0600); err != nil {
		return fmt.Errorf("failed to write k0s metadata: %w", err)
	}
	return nil
}

func ParseK0sMetadata(rawmetadata string, isAirgap bool) (*K0sMetadata, error) {
	rprefix, err := GetReplicatedProxyPrefix(isAirgap)
	if err != nil {
		return nil, fmt.Errorf("get replicated proxy prefix: %w", err)
	}
	templated := strings.ReplaceAll(rawmetadata, DefaultReplicatedProxyPrefix, rprefix)
	var parsed K0sMetadata
	if err := yaml.Unmarshal([]byte(templated), &parsed); err != nil {
		return nil, fmt.Errorf("unmarshal metadata: %w", err)
	}
	return &parsed, nil
}
