/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate a user
         * @description Authenticate a user
         */
        post: operations["postAuthLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/console/available-network-interfaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available network interfaces
         * @description List available network interfaces
         */
        get: operations["getConsoleListAvailableNetworkInterfaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the health of the API
         * @description get the health of the API
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/app-preflights/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run install app preflight checks
         * @description Run install app preflight checks using current app configuration
         */
        post: operations["postKubernetesInstallRunAppPreflights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/app-preflights/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app preflight status for install
         * @description Get the current status and results of app preflight checks for install
         */
        get: operations["getKubernetesInstallAppPreflightsStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/app/config/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Template the app config with provided values
         * @description Template the app config with provided values and return the templated config
         */
        post: operations["postKubernetesInstallTemplateAppConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/app/config/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the app config values
         * @description Get the current app config values
         */
        get: operations["getKubernetesInstallAppConfigValues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set the app config values
         * @description Set the app config values with partial updates
         */
        patch: operations["patchKubernetesInstallAppConfigValues"];
        trace?: never;
    };
    "/kubernetes/install/app/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Install the app
         * @description Install the app using current configuration
         */
        post: operations["postKubernetesInstallApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/app/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app install status
         * @description Get the current status of app installation
         */
        get: operations["getKubernetesInstallAppStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/infra/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup infra components
         * @description Setup infra components
         */
        post: operations["postKubernetesInstallSetupInfra"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/infra/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status of the infra
         * @description Get the current status of the infra
         */
        get: operations["getKubernetesInstallInfraStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/installation/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the Kubernetes installation config
         * @description get the Kubernetes installation config
         */
        get: operations["getKubernetesInstallInstallationConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/installation/configure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Configure the Kubernetes installation for install
         * @description configure the Kubernetes installation for install
         */
        post: operations["postKubernetesInstallConfigureInstallation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/install/installation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get installation configuration status for install
         * @description Get the current status of the installation configuration for install
         */
        get: operations["getKubernetesInstallInstallationStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/upgrade/app-preflights/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run upgrade app preflight checks
         * @description Run upgrade app preflight checks using current app configuration
         */
        post: operations["postKubernetesUpgradeRunAppPreflights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/upgrade/app-preflights/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app preflight status for upgrade
         * @description Get the current status and results of app preflight checks for upgrade
         */
        get: operations["getKubernetesUpgradeAppPreflightsStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/upgrade/app/config/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Template app config for upgrade
         * @description Template the app configuration with values for upgrade
         */
        post: operations["postKubernetesUpgradeAppConfigTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/upgrade/app/config/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the app config values for upgrade
         * @description Get the current app config values for upgrade
         */
        get: operations["getKubernetesUpgradeAppConfigValues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set the app config values for upgrade
         * @description Set the app config values with partial updates for upgrade
         */
        patch: operations["patchKubernetesUpgradeAppConfigValues"];
        trace?: never;
    };
    "/kubernetes/upgrade/app/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app upgrade status
         * @description Get the current status of app upgrade
         */
        get: operations["getKubernetesUpgradeAppStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kubernetes/upgrade/app/upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade the app
         * @description Upgrade the app using current configuration
         */
        post: operations["postKubernetesUpgradeApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/airgap/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process the airgap bundle
         * @description Process the airgap bundle for install
         */
        post: operations["postLinuxInstallProcessAirgap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/airgap/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status of the airgap processing
         * @description Get the current status of the airgap processing for install
         */
        get: operations["getLinuxInstallAirgapStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/app-preflights/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run install app preflight checks
         * @description Run install app preflight checks using current app configuration
         */
        post: operations["postLinuxInstallRunAppPreflights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/app-preflights/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app preflight status for install
         * @description Get the current status and results of app preflight checks for install
         */
        get: operations["getLinuxInstallAppPreflightsStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/app/config/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Template the app config with provided values
         * @description Template the app config with provided values and return the templated config
         */
        post: operations["postLinuxInstallTemplateAppConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/app/config/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the app config values
         * @description Get the current app config values
         */
        get: operations["getLinuxInstallAppConfigValues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set the app config values
         * @description Set the app config values with partial updates
         */
        patch: operations["patchLinuxInstallAppConfigValues"];
        trace?: never;
    };
    "/linux/install/app/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Install the app
         * @description Install the app using current configuration
         */
        post: operations["postLinuxInstallApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/app/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app install status
         * @description Get the current status of app installation
         */
        get: operations["getLinuxInstallAppStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/host-preflights/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run install host preflight checks
         * @description Run install host preflight checks using installation config and client-provided data
         */
        post: operations["postLinuxInstallRunHostPreflights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/host-preflights/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get host preflight status for install
         * @description Get the current status and results of host preflight checks for install
         */
        get: operations["getLinuxInstallHostPreflightsStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/infra/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup infra components
         * @description Setup infra components
         */
        post: operations["postLinuxInstallSetupInfra"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/infra/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status of the infra
         * @description Get the current status of the infra
         */
        get: operations["getLinuxInstallInfraStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/installation/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the installation config
         * @description get the installation config
         */
        get: operations["getLinuxInstallInstallationConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/installation/configure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Configure the installation for install
         * @description configure the installation for install
         */
        post: operations["postLinuxInstallConfigureInstallation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/install/installation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get installation configuration status for install
         * @description Get the current status of the installation configuration for install
         */
        get: operations["getLinuxInstallInstallationStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/airgap/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process the airgap bundle
         * @description Process the airgap bundle for upgrade
         */
        post: operations["postLinuxUpgradeProcessAirgap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/airgap/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status of the airgap processing
         * @description Get the current status of the airgap processing for upgrade
         */
        get: operations["getLinuxUpgradeAirgapStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/app-preflights/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run upgrade app preflight checks
         * @description Run upgrade app preflight checks using current app configuration
         */
        post: operations["postLinuxUpgradeRunAppPreflights"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/app-preflights/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app preflight status for upgrade
         * @description Get the current status and results of app preflight checks for upgrade
         */
        get: operations["getLinuxUpgradeAppPreflightsStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/app/config/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Template app config for upgrade
         * @description Template the app configuration with values for upgrade
         */
        post: operations["postLinuxUpgradeAppConfigTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/app/config/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the app config values for upgrade
         * @description Get the current app config values for upgrade
         */
        get: operations["getLinuxUpgradeAppConfigValues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set the app config values for upgrade
         * @description Set the app config values with partial updates for upgrade
         */
        patch: operations["patchLinuxUpgradeAppConfigValues"];
        trace?: never;
    };
    "/linux/upgrade/app/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app upgrade status
         * @description Get the current status of app upgrade
         */
        get: operations["getLinuxUpgradeAppStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/app/upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade the app
         * @description Upgrade the app using current configuration
         */
        post: operations["postLinuxUpgradeApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/infra/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status of the infra upgrade
         * @description Get the current status of the infrastructure upgrade
         */
        get: operations["getLinuxUpgradeInfraStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/linux/upgrade/infra/upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade the infrastructure
         * @description Upgrade the infrastructure (k0s, addons, extensions)
         */
        post: operations["postLinuxUpgradeInfra"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "github_com_replicatedhq_embedded-cluster_api_types.Health": {
            status: string;
        };
        "github_com_replicatedhq_kotskinds_multitype.BoolOrString": Record<string, never>;
        "types.APIError": {
            errors?: components["schemas"]["types.APIError"][];
            field?: string;
            message: string;
            statusCode?: number;
        };
        "types.Airgap": {
            logs: string;
            status: components["schemas"]["types.Status"];
        };
        "types.AppConfig": {
            groups: components["schemas"]["v1beta1.ConfigGroup"][];
        };
        "types.AppConfigValue": {
            data?: string;
            dataPlaintext?: string;
            default?: string;
            filename?: string;
            repeatableItem?: string;
            value: string;
            valuePlaintext?: string;
        };
        "types.AppConfigValues": {
            [key: string]: components["schemas"]["types.AppConfigValue"];
        };
        "types.AppConfigValuesResponse": {
            values: components["schemas"]["types.AppConfigValues"];
        };
        "types.AppInstall": {
            logs: string;
            status: components["schemas"]["types.Status"];
        };
        "types.AppUpgrade": {
            logs: string;
            status: components["schemas"]["types.Status"];
        };
        "types.AuthRequest": {
            password: string;
        };
        "types.AuthResponse": {
            token: string;
        };
        "types.Error": {
            /**
             * @description The error code is a string that uniquely identifies an error condition. It is
             *     meant to be read and understood by programs that detect and handle errors by
             *     type. The following is a list of Amazon S3 error codes. For more information,
             *     see [Error responses].
             *
             *       - Code: AccessDenied
             *
             *       - Description: Access Denied
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: AccountProblem
             *
             *       - Description: There is a problem with your Amazon Web Services account that
             *       prevents the action from completing successfully. Contact Amazon Web Services
             *       Support for further assistance.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: AllAccessDisabled
             *
             *       - Description: All access to this Amazon S3 resource has been disabled.
             *       Contact Amazon Web Services Support for further assistance.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: AmbiguousGrantByEmailAddress
             *
             *       - Description: The email address you provided is associated with more than
             *       one account.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: AuthorizationHeaderMalformed
             *
             *       - Description: The authorization header you provided is invalid.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - HTTP Status Code: N/A
             *
             *       - Code: BadDigest
             *
             *       - Description: The Content-MD5 you specified did not match what we received.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: BucketAlreadyExists
             *
             *       - Description: The requested bucket name is not available. The bucket
             *       namespace is shared by all users of the system. Please select a different name
             *       and try again.
             *
             *       - HTTP Status Code: 409 Conflict
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: BucketAlreadyOwnedByYou
             *
             *       - Description: The bucket you tried to create already exists, and you own it.
             *       Amazon S3 returns this error in all Amazon Web Services Regions except in the
             *       North Virginia Region. For legacy compatibility, if you re-create an existing
             *       bucket that you already own in the North Virginia Region, Amazon S3 returns 200
             *       OK and resets the bucket access control lists (ACLs).
             *
             *       - Code: 409 Conflict (in all Regions except the North Virginia Region)
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: BucketNotEmpty
             *
             *       - Description: The bucket you tried to delete is not empty.
             *
             *       - HTTP Status Code: 409 Conflict
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: CredentialsNotSupported
             *
             *       - Description: This request does not support credentials.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: CrossLocationLoggingProhibited
             *
             *       - Description: Cross-location logging not allowed. Buckets in one geographic
             *       location cannot log information to a bucket in another location.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: EntityTooSmall
             *
             *       - Description: Your proposed upload is smaller than the minimum allowed
             *       object size.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: EntityTooLarge
             *
             *       - Description: Your proposed upload exceeds the maximum allowed object size.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: ExpiredToken
             *
             *       - Description: The provided token has expired.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: IllegalVersioningConfigurationException
             *
             *       - Description: Indicates that the versioning configuration specified in the
             *       request is invalid.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: IncompleteBody
             *
             *       - Description: You did not provide the number of bytes specified by the
             *       Content-Length HTTP header
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: IncorrectNumberOfFilesInPostRequest
             *
             *       - Description: POST requires exactly one file upload per request.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InlineDataTooLarge
             *
             *       - Description: Inline data exceeds the maximum allowed size.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InternalError
             *
             *       - Description: We encountered an internal error. Please try again.
             *
             *       - HTTP Status Code: 500 Internal Server Error
             *
             *       - SOAP Fault Code Prefix: Server
             *
             *       - Code: InvalidAccessKeyId
             *
             *       - Description: The Amazon Web Services access key ID you provided does not
             *       exist in our records.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidAddressingHeader
             *
             *       - Description: You must specify the Anonymous role.
             *
             *       - HTTP Status Code: N/A
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidArgument
             *
             *       - Description: Invalid Argument
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidBucketName
             *
             *       - Description: The specified bucket is not valid.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidBucketState
             *
             *       - Description: The request is not valid with the current state of the bucket.
             *
             *       - HTTP Status Code: 409 Conflict
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidDigest
             *
             *       - Description: The Content-MD5 you specified is not valid.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidEncryptionAlgorithmError
             *
             *       - Description: The encryption request you specified is not valid. The valid
             *       value is AES256.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidLocationConstraint
             *
             *       - Description: The specified location constraint is not valid. For more
             *       information about Regions, see [How to Select a Region for Your Buckets].
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidObjectState
             *
             *       - Description: The action is not valid for the current state of the object.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidPart
             *
             *       - Description: One or more of the specified parts could not be found. The
             *       part might not have been uploaded, or the specified entity tag might not have
             *       matched the part's entity tag.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidPartOrder
             *
             *       - Description: The list of parts was not in ascending order. Parts list must
             *       be specified in order by part number.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidPayer
             *
             *       - Description: All access to this object has been disabled. Please contact
             *       Amazon Web Services Support for further assistance.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidPolicyDocument
             *
             *       - Description: The content of the form does not meet the conditions specified
             *       in the policy document.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidRange
             *
             *       - Description: The requested range cannot be satisfied.
             *
             *       - HTTP Status Code: 416 Requested Range Not Satisfiable
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Please use AWS4-HMAC-SHA256 .
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidRequest
             *
             *       - Description: SOAP requests must be made over an HTTPS connection.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Amazon S3 Transfer Acceleration is not supported for buckets
             *       with non-DNS compliant names.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Amazon S3 Transfer Acceleration is not supported for buckets
             *       with periods (.) in their names.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Amazon S3 Transfer Accelerate endpoint only supports virtual
             *       style requests.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Amazon S3 Transfer Accelerate is not configured on this bucket.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Amazon S3 Transfer Accelerate is disabled on this bucket.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Amazon S3 Transfer Acceleration is not supported on this
             *       bucket. Contact Amazon Web Services Support for more information.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidRequest
             *
             *       - Description: Amazon S3 Transfer Acceleration cannot be enabled on this
             *       bucket. Contact Amazon Web Services Support for more information.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - Code: N/A
             *
             *       - Code: InvalidSecurity
             *
             *       - Description: The provided security credentials are not valid.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidSOAPRequest
             *
             *       - Description: The SOAP request body is invalid.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidStorageClass
             *
             *       - Description: The storage class you specified is not valid.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidTargetBucketForLogging
             *
             *       - Description: The target bucket for logging does not exist, is not owned by
             *       you, or does not have the appropriate grants for the log-delivery group.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidToken
             *
             *       - Description: The provided token is malformed or otherwise invalid.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: InvalidURI
             *
             *       - Description: Couldn't parse the specified URI.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: KeyTooLongError
             *
             *       - Description: Your key is too long.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MalformedACLError
             *
             *       - Description: The XML you provided was not well-formed or did not validate
             *       against our published schema.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MalformedPOSTRequest
             *
             *       - Description: The body of your POST request is not well-formed
             *       multipart/form-data.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MalformedXML
             *
             *       - Description: This happens when the user sends malformed XML (XML that
             *       doesn't conform to the published XSD) for the configuration. The error message
             *       is, "The XML you provided was not well-formed or did not validate against our
             *       published schema."
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MaxMessageLengthExceeded
             *
             *       - Description: Your request was too big.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MaxPostPreDataLengthExceededError
             *
             *       - Description: Your POST request fields preceding the upload file were too
             *       large.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MetadataTooLarge
             *
             *       - Description: Your metadata headers exceed the maximum allowed metadata size.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MethodNotAllowed
             *
             *       - Description: The specified method is not allowed against this resource.
             *
             *       - HTTP Status Code: 405 Method Not Allowed
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MissingAttachment
             *
             *       - Description: A SOAP attachment was expected, but none were found.
             *
             *       - HTTP Status Code: N/A
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MissingContentLength
             *
             *       - Description: You must provide the Content-Length HTTP header.
             *
             *       - HTTP Status Code: 411 Length Required
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MissingRequestBodyError
             *
             *       - Description: This happens when the user sends an empty XML document as a
             *       request. The error message is, "Request body is empty."
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MissingSecurityElement
             *
             *       - Description: The SOAP 1.1 request is missing a security element.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: MissingSecurityHeader
             *
             *       - Description: Your request is missing a required header.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NoLoggingStatusForKey
             *
             *       - Description: There is no such thing as a logging status subresource for a
             *       key.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NoSuchBucket
             *
             *       - Description: The specified bucket does not exist.
             *
             *       - HTTP Status Code: 404 Not Found
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NoSuchBucketPolicy
             *
             *       - Description: The specified bucket does not have a bucket policy.
             *
             *       - HTTP Status Code: 404 Not Found
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NoSuchKey
             *
             *       - Description: The specified key does not exist.
             *
             *       - HTTP Status Code: 404 Not Found
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NoSuchLifecycleConfiguration
             *
             *       - Description: The lifecycle configuration does not exist.
             *
             *       - HTTP Status Code: 404 Not Found
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NoSuchUpload
             *
             *       - Description: The specified multipart upload does not exist. The upload ID
             *       might be invalid, or the multipart upload might have been aborted or completed.
             *
             *       - HTTP Status Code: 404 Not Found
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NoSuchVersion
             *
             *       - Description: Indicates that the version ID specified in the request does
             *       not match an existing version.
             *
             *       - HTTP Status Code: 404 Not Found
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: NotImplemented
             *
             *       - Description: A header you provided implies functionality that is not
             *       implemented.
             *
             *       - HTTP Status Code: 501 Not Implemented
             *
             *       - SOAP Fault Code Prefix: Server
             *
             *       - Code: NotSignedUp
             *
             *       - Description: Your account is not signed up for the Amazon S3 service. You
             *       must sign up before you can use Amazon S3. You can sign up at the following URL:
             *       [Amazon S3]
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: OperationAborted
             *
             *       - Description: A conflicting conditional action is currently in progress
             *       against this resource. Try again.
             *
             *       - HTTP Status Code: 409 Conflict
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: PermanentRedirect
             *
             *       - Description: The bucket you are attempting to access must be addressed
             *       using the specified endpoint. Send all future requests to this endpoint.
             *
             *       - HTTP Status Code: 301 Moved Permanently
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: PreconditionFailed
             *
             *       - Description: At least one of the preconditions you specified did not hold.
             *
             *       - HTTP Status Code: 412 Precondition Failed
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: Redirect
             *
             *       - Description: Temporary redirect.
             *
             *       - HTTP Status Code: 307 Moved Temporarily
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: RestoreAlreadyInProgress
             *
             *       - Description: Object restore is already in progress.
             *
             *       - HTTP Status Code: 409 Conflict
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: RequestIsNotMultiPartContent
             *
             *       - Description: Bucket POST must be of the enclosure-type multipart/form-data.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: RequestTimeout
             *
             *       - Description: Your socket connection to the server was not read from or
             *       written to within the timeout period.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: RequestTimeTooSkewed
             *
             *       - Description: The difference between the request time and the server's time
             *       is too large.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: RequestTorrentOfBucketError
             *
             *       - Description: Requesting the torrent file of a bucket is not permitted.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: SignatureDoesNotMatch
             *
             *       - Description: The request signature we calculated does not match the
             *       signature you provided. Check your Amazon Web Services secret access key and
             *       signing method. For more information, see [REST Authentication]and [SOAP Authentication]for details.
             *
             *       - HTTP Status Code: 403 Forbidden
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: ServiceUnavailable
             *
             *       - Description: Service is unable to handle request.
             *
             *       - HTTP Status Code: 503 Service Unavailable
             *
             *       - SOAP Fault Code Prefix: Server
             *
             *       - Code: SlowDown
             *
             *       - Description: Reduce your request rate.
             *
             *       - HTTP Status Code: 503 Slow Down
             *
             *       - SOAP Fault Code Prefix: Server
             *
             *       - Code: TemporaryRedirect
             *
             *       - Description: You are being redirected to the bucket while DNS updates.
             *
             *       - HTTP Status Code: 307 Moved Temporarily
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: TokenRefreshRequired
             *
             *       - Description: The provided token must be refreshed.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: TooManyBuckets
             *
             *       - Description: You have attempted to create more buckets than allowed.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: UnexpectedContent
             *
             *       - Description: This request does not support content.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: UnresolvableGrantByEmailAddress
             *
             *       - Description: The email address you provided does not match any account on
             *       record.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *       - Code: UserKeyMustBeSpecified
             *
             *       - Description: The bucket POST must contain the specified field name. If it
             *       is specified, check the order of the fields.
             *
             *       - HTTP Status Code: 400 Bad Request
             *
             *       - SOAP Fault Code Prefix: Client
             *
             *     [How to Select a Region for Your Buckets]: https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro
             *     [Error responses]: https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html
             *     [REST Authentication]: https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html
             *     [Amazon S3]: http://aws.amazon.com/s3
             *     [SOAP Authentication]: https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html
             */
            code?: string;
            /** @description The error key. */
            key?: string;
            /**
             * @description The error message contains a generic description of the error condition in
             *     English. It is intended for a human audience. Simple programs display the
             *     message directly to the end user if they encounter an error condition they don't
             *     know how or don't care to handle. Sophisticated programs with more exhaustive
             *     error handling and proper internationalization are more likely to ignore the
             *     error message.
             */
            message?: string;
            /**
             * @description The version ID of the error.
             *
             *     This functionality is not supported for directory buckets.
             */
            versionId?: string;
        };
        "types.GetListAvailableNetworkInterfacesResponse": {
            networkInterfaces: string[];
        };
        "types.Infra": {
            components: components["schemas"]["types.InfraComponent"][];
            logs: string;
            status: components["schemas"]["types.Status"];
        };
        "types.InfraComponent": {
            name: string;
            status: components["schemas"]["types.Status"];
        };
        "types.InstallAppPreflightsStatusResponse": {
            allowIgnoreAppPreflights: boolean;
            hasStrictAppPreflightFailures: boolean;
            output?: components["schemas"]["types.PreflightsOutput"];
            status: components["schemas"]["types.Status"];
            titles: string[];
        };
        "types.InstallAppRequest": {
            ignoreAppPreflights: boolean;
        };
        "types.InstallHostPreflightsStatusResponse": {
            allowIgnoreHostPreflights: boolean;
            output?: components["schemas"]["types.PreflightsOutput"];
            status?: components["schemas"]["types.Status"];
            titles: string[];
        };
        "types.KubernetesInstallationConfig": {
            adminConsolePort?: number;
            httpProxy?: string;
            httpsProxy?: string;
            noProxy?: string;
        };
        "types.KubernetesInstallationConfigResponse": {
            defaults: components["schemas"]["types.KubernetesInstallationConfig"];
            resolved: components["schemas"]["types.KubernetesInstallationConfig"];
            values: components["schemas"]["types.KubernetesInstallationConfig"];
        };
        "types.LinuxInfraSetupRequest": {
            ignoreHostPreflights: boolean;
        };
        "types.LinuxInstallationConfig": {
            adminConsolePort?: number;
            dataDirectory?: string;
            globalCidr?: string;
            httpProxy?: string;
            httpsProxy?: string;
            localArtifactMirrorPort?: number;
            networkInterface?: string;
            noProxy?: string;
            podCidr?: string;
            serviceCidr?: string;
        };
        "types.LinuxInstallationConfigResponse": {
            defaults: components["schemas"]["types.LinuxInstallationConfig"];
            resolved: components["schemas"]["types.LinuxInstallationConfig"];
            values: components["schemas"]["types.LinuxInstallationConfig"];
        };
        "types.PatchAppConfigValuesRequest": {
            values: components["schemas"]["types.AppConfigValues"];
        };
        "types.PostInstallRunHostPreflightsRequest": {
            isUi: boolean;
        };
        "types.PreflightsOutput": {
            fail: components["schemas"]["types.PreflightsRecord"][];
            pass: components["schemas"]["types.PreflightsRecord"][];
            warn: components["schemas"]["types.PreflightsRecord"][];
        };
        "types.PreflightsRecord": {
            message: string;
            strict: boolean;
            title: string;
        };
        /**
         * @example Succeeded
         * @enum {string}
         */
        "types.State": "Pending" | "Running" | "Succeeded" | "Failed";
        "types.Status": {
            description: string;
            lastUpdated: string;
            state: components["schemas"]["types.State"];
        };
        "types.TemplateAppConfigRequest": {
            values: components["schemas"]["types.AppConfigValues"];
        };
        "types.UpgradeAppPreflightsStatusResponse": {
            allowIgnoreAppPreflights: boolean;
            hasStrictAppPreflightFailures: boolean;
            output?: components["schemas"]["types.PreflightsOutput"];
            status: components["schemas"]["types.Status"];
            titles: string[];
        };
        "types.UpgradeAppRequest": {
            ignoreAppPreflights: boolean;
        };
        "v1beta1.ConfigChildItem": {
            default: components["schemas"]["github_com_replicatedhq_kotskinds_multitype.BoolOrString"];
            name: string;
            recommended: boolean;
            title: string;
            value: components["schemas"]["github_com_replicatedhq_kotskinds_multitype.BoolOrString"];
        };
        "v1beta1.ConfigGroup": {
            description: string;
            items: components["schemas"]["v1beta1.ConfigItem"][];
            name: string;
            title: string;
            when: string;
        };
        "v1beta1.ConfigItem": {
            affix: string;
            countByGroup: {
                [key: string]: number;
            };
            data: string;
            default: components["schemas"]["github_com_replicatedhq_kotskinds_multitype.BoolOrString"];
            error: string;
            filename: string;
            help_text: string;
            hidden: boolean;
            items: components["schemas"]["v1beta1.ConfigChildItem"][];
            minimumCount: number;
            multi_value: string[];
            multiple: boolean;
            name: string;
            readonly: boolean;
            recommended: boolean;
            repeatable: boolean;
            required: boolean;
            templates: components["schemas"]["v1beta1.RepeatTemplate"][];
            title: string;
            type: string;
            validation: components["schemas"]["v1beta1.ConfigItemValidation"];
            value: components["schemas"]["github_com_replicatedhq_kotskinds_multitype.BoolOrString"];
            valuesByGroup: components["schemas"]["v1beta1.ValuesByGroup"];
            when: string;
            write_once: boolean;
        };
        "v1beta1.ConfigItemValidation": {
            regex: components["schemas"]["v1beta1.RegexValidator"];
        };
        "v1beta1.GroupValues": {
            [key: string]: string;
        };
        "v1beta1.RegexValidator": {
            message: string;
            pattern: string;
        };
        "v1beta1.RepeatTemplate": {
            apiVersion: string;
            kind: string;
            name: string;
            namespace: string;
            yamlPath: string;
        };
        "v1beta1.ValuesByGroup": {
            [key: string]: components["schemas"]["v1beta1.GroupValues"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    postAuthLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Auth Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.AuthRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AuthResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getConsoleListAvailableNetworkInterfaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.GetListAvailableNetworkInterfacesResponse"];
                };
            };
        };
    };
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["github_com_replicatedhq_embedded-cluster_api_types.Health"];
                };
            };
        };
    };
    postKubernetesInstallRunAppPreflights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.InstallAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getKubernetesInstallAppPreflightsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.InstallAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postKubernetesInstallTemplateAppConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Template App Config Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.TemplateAppConfigRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfig"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getKubernetesInstallAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    patchKubernetesInstallAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Patch App Config Values Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.PatchAppConfigValuesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postKubernetesInstallApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Install App Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.InstallAppRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppInstall"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getKubernetesInstallAppStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppInstall"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postKubernetesInstallSetupInfra: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Infra"];
                };
            };
        };
    };
    getKubernetesInstallInfraStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Infra"];
                };
            };
        };
    };
    getKubernetesInstallInstallationConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.KubernetesInstallationConfigResponse"];
                };
            };
        };
    };
    postKubernetesInstallConfigureInstallation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Installation config */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.KubernetesInstallationConfig"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Status"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getKubernetesInstallInstallationStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Status"];
                };
            };
        };
    };
    postKubernetesUpgradeRunAppPreflights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.UpgradeAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getKubernetesUpgradeAppPreflightsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.UpgradeAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postKubernetesUpgradeAppConfigTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Template App Config Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.TemplateAppConfigRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfig"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getKubernetesUpgradeAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    patchKubernetesUpgradeAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Patch App Config Values Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.PatchAppConfigValuesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getKubernetesUpgradeAppStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppUpgrade"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postKubernetesUpgradeApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Upgrade App Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.UpgradeAppRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppUpgrade"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxInstallProcessAirgap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Airgap"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxInstallAirgapStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Airgap"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxInstallRunAppPreflights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.InstallAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxInstallAppPreflightsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.InstallAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxInstallTemplateAppConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Template App Config Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.TemplateAppConfigRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfig"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxInstallAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    patchLinuxInstallAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Patch App Config Values Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.PatchAppConfigValuesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxInstallApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Install App Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.InstallAppRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppInstall"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxInstallAppStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppInstall"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxInstallRunHostPreflights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Post Install Run Host Preflights Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.PostInstallRunHostPreflightsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.InstallHostPreflightsStatusResponse"];
                };
            };
        };
    };
    getLinuxInstallHostPreflightsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.InstallHostPreflightsStatusResponse"];
                };
            };
        };
    };
    postLinuxInstallSetupInfra: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Infra Setup Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.LinuxInfraSetupRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Infra"];
                };
            };
        };
    };
    getLinuxInstallInfraStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Infra"];
                };
            };
        };
    };
    getLinuxInstallInstallationConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.LinuxInstallationConfigResponse"];
                };
            };
        };
    };
    postLinuxInstallConfigureInstallation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Installation config */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.LinuxInstallationConfig"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Status"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxInstallInstallationStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Status"];
                };
            };
        };
    };
    postLinuxUpgradeProcessAirgap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Airgap"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxUpgradeAirgapStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Airgap"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxUpgradeRunAppPreflights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.UpgradeAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxUpgradeAppPreflightsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.UpgradeAppPreflightsStatusResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxUpgradeAppConfigTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Template App Config Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.TemplateAppConfigRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfig"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxUpgradeAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    patchLinuxUpgradeAppConfigValues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Patch App Config Values Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.PatchAppConfigValuesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppConfigValuesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxUpgradeAppStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppUpgrade"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    postLinuxUpgradeApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Upgrade App Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["types.UpgradeAppRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.AppUpgrade"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.APIError"];
                };
            };
        };
    };
    getLinuxUpgradeInfraStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Infra"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Error"];
                };
            };
        };
    };
    postLinuxUpgradeInfra: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Infra"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["types.Error"];
                };
            };
        };
    };
}
