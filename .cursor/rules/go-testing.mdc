---
description: 
globs: *.go
alwaysApply: false
---
# Testing

## Core Rules

1. **One test function per code function** - Never create multiple test functions for the same code function
2. **Use table-driven tests** for multiple scenarios within a single test function
3. **Test behavior, not implementation** - Focus on public API behavior
4. **Mock all external dependencies** using `testify/mock`

## Test Function Organization

### ❌ DON'T - Function Sprawl
```go
func TestNewController_BasicScenario(t *testing.T) { ... }
func TestNewController_ErrorHandling(t *testing.T) { ... }
func TestNewController_ConfigValues(t *testing.T) { ... }
```

### ✅ DO - Single Function with Table Tests
```go
func TestNewController(t *testing.T) {
    tests := []struct {
        name     string
        setup    func()
        wantErr  bool
    }{
        {name: "basic scenario", setup: ..., wantErr: false},
        {name: "error handling", setup: ..., wantErr: true},
        {name: "config values", setup: ..., wantErr: false},
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            // test implementation
        })
    }
}
```

## Naming Conventions

- **Test functions**: `TestFunctionName` or `TestType_MethodName`
- **Test cases**: Descriptive scenario names: `"empty input should return error"`
- **Mock types**: `MockTypeName struct { mock.Mock }`

## Required Libraries

```go
import (
    "testing"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require" 
    "github.com/stretchr/testify/mock"
)
```

## Mock Patterns

### Setup in Table Tests
```go
tests := []struct {
    name      string
    setupMock func(*MockType)
}{
    {
        name: "successful operation",
        setupMock: func(m *MockType) {
            m.On("Method", mock.Anything).Return(nil)
        },
    },
}
```

### Always Verify Mocks
```go
mockManager.AssertExpectations(t)
```

## File Organization

- One test file per source file: `file.go` → `file_test.go`
- Integration tests: `api/integration/*_test.go`
- Test assets: `assets/` subdirectories

## What NOT to Test

- Data structure existence: `assert.NotNil(t, &Config{})` 
- Private implementation details
- External library behavior

## Required Assertions

- Use `require.*` for fatal assertions (stop test on failure)
- Use `assert.*` for non-fatal assertions (continue test)
- Always call `AssertExpectations(t)` on mocks

